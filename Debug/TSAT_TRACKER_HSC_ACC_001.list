
TSAT_TRACKER_HSC_ACC_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005274  08005274  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800527c  0800527c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800527c  0800527c  0001527c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000060  080052e4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  080052e4  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127dd  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002648  00000000  00000000  000328a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00034ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c11  00000000  00000000  00035ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019800  00000000  00000000  00036ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011759  00000000  00000000  000502b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0ec9  00000000  00000000  00061a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d8c  00000000  00000000  001028dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00106668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800514c 	.word	0x0800514c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	0800514c 	.word	0x0800514c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8d8 	bl	8000628 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8d3 	bl	8000628 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzsi2>:
 80005ec:	211c      	movs	r1, #28
 80005ee:	2301      	movs	r3, #1
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0xe>
 80005f6:	0c00      	lsrs	r0, r0, #16
 80005f8:	3910      	subs	r1, #16
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	4298      	cmp	r0, r3
 80005fe:	d301      	bcc.n	8000604 <__clzsi2+0x18>
 8000600:	0a00      	lsrs	r0, r0, #8
 8000602:	3908      	subs	r1, #8
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0x22>
 800060a:	0900      	lsrs	r0, r0, #4
 800060c:	3904      	subs	r1, #4
 800060e:	a202      	add	r2, pc, #8	; (adr r2, 8000618 <__clzsi2+0x2c>)
 8000610:	5c10      	ldrb	r0, [r2, r0]
 8000612:	1840      	adds	r0, r0, r1
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	02020304 	.word	0x02020304
 800061c:	01010101 	.word	0x01010101
	...

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f7ff ffdd 	bl	80005ec <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f7ff ffd8 	bl	80005ec <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	4c54      	ldr	r4, [pc, #336]	; (8000794 <main+0x154>)
 8000644:	44a5      	add	sp, r4
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fca0 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f8be 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 f9cc 	bl	80009ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f97c 	bl	8000950 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000658:	f000 f90e 	bl	8000878 <MX_RTC_Init>
  MX_SPI1_Init();
 800065c:	f000 f93a 	bl	80008d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;
 8000660:	4b4d      	ldr	r3, [pc, #308]	; (8000798 <main+0x158>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <main+0x158>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	0018      	movs	r0, r3
 800066a:	f7ff fd4b 	bl	8000104 <strlen>
 800066e:	0003      	movs	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	23fa      	movs	r3, #250	; 0xfa
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4849      	ldr	r0, [pc, #292]	; (800079c <main+0x15c>)
 8000678:	0021      	movs	r1, r4
 800067a:	f002 ff43 	bl	8003504 <HAL_UART_Transmit>
  send_2_dbg ( (uint8_t*) hello ) ;
 800067e:	4b46      	ldr	r3, [pc, #280]	; (8000798 <main+0x158>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fabe 	bl	8000c04 <send_2_dbg>

  my_lis2dw12_ctx.write_reg = my_lis2dw12_platform_write ;
 8000688:	4b45      	ldr	r3, [pc, #276]	; (80007a0 <main+0x160>)
 800068a:	4a46      	ldr	r2, [pc, #280]	; (80007a4 <main+0x164>)
 800068c:	601a      	str	r2, [r3, #0]
  my_lis2dw12_ctx.read_reg = my_lis2dw12_platform_read ;
 800068e:	4b44      	ldr	r3, [pc, #272]	; (80007a0 <main+0x160>)
 8000690:	4a45      	ldr	r2, [pc, #276]	; (80007a8 <main+0x168>)
 8000692:	605a      	str	r2, [r3, #4]
  my_lis2dw12_ctx.handle = HSPI1 ;
 8000694:	4b42      	ldr	r3, [pc, #264]	; (80007a0 <main+0x160>)
 8000696:	4a45      	ldr	r2, [pc, #276]	; (80007ac <main+0x16c>)
 8000698:	60da      	str	r2, [r3, #12]

  //Restore default configuration
  my_lis2dw12_init ( &my_lis2dw12_ctx ) ;
 800069a:	4b41      	ldr	r3, [pc, #260]	; (80007a0 <main+0x160>)
 800069c:	0018      	movs	r0, r3
 800069e:	f004 f843 	bl	8004728 <my_lis2dw12_init>
*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t tx_buffer[1000] = {0} ;
 80006a2:	4b43      	ldr	r3, [pc, #268]	; (80007b0 <main+0x170>)
 80006a4:	22fa      	movs	r2, #250	; 0xfa
 80006a6:	0092      	lsls	r2, r2, #2
 80006a8:	189b      	adds	r3, r3, r2
 80006aa:	19db      	adds	r3, r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	3304      	adds	r3, #4
 80006b2:	22f9      	movs	r2, #249	; 0xf9
 80006b4:	0092      	lsls	r2, r2, #2
 80006b6:	2100      	movs	r1, #0
 80006b8:	0018      	movs	r0, r3
 80006ba:	f004 f8c1 	bl	8004840 <memset>
  while (1)
  {
	  if (all_source.wake_up_src.wu_ia)
 80006be:	4b3d      	ldr	r3, [pc, #244]	; (80007b4 <main+0x174>)
 80006c0:	785b      	ldrb	r3, [r3, #1]
 80006c2:	2208      	movs	r2, #8
 80006c4:	4013      	ands	r3, r2
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0f8      	beq.n	80006be <main+0x7e>
	  {
		  sprintf((char *)tx_buffer, "Wake-Up event on ");
 80006cc:	4a3a      	ldr	r2, [pc, #232]	; (80007b8 <main+0x178>)
 80006ce:	003b      	movs	r3, r7
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f004 f894 	bl	8004800 <siprintf>
		  if (all_source.wake_up_src.x_wu)
 80006d8:	4b36      	ldr	r3, [pc, #216]	; (80007b4 <main+0x174>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	2204      	movs	r2, #4
 80006de:	4013      	ands	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00e      	beq.n	8000704 <main+0xc4>
		  {
			  strcat((char *)tx_buffer, "X");
 80006e6:	003b      	movs	r3, r7
 80006e8:	0018      	movs	r0, r3
 80006ea:	f7ff fd0b 	bl	8000104 <strlen>
 80006ee:	0003      	movs	r3, r0
 80006f0:	001a      	movs	r2, r3
 80006f2:	003b      	movs	r3, r7
 80006f4:	189a      	adds	r2, r3, r2
 80006f6:	4b31      	ldr	r3, [pc, #196]	; (80007bc <main+0x17c>)
 80006f8:	0010      	movs	r0, r2
 80006fa:	0019      	movs	r1, r3
 80006fc:	2302      	movs	r3, #2
 80006fe:	001a      	movs	r2, r3
 8000700:	f004 f8d2 	bl	80048a8 <memcpy>
		  }
		  if (all_source.wake_up_src.y_wu)
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <main+0x174>)
 8000706:	785b      	ldrb	r3, [r3, #1]
 8000708:	2202      	movs	r2, #2
 800070a:	4013      	ands	r3, r2
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d00e      	beq.n	8000730 <main+0xf0>
		  {
			  strcat((char *)tx_buffer, "Y");
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff fcf5 	bl	8000104 <strlen>
 800071a:	0003      	movs	r3, r0
 800071c:	001a      	movs	r2, r3
 800071e:	003b      	movs	r3, r7
 8000720:	189a      	adds	r2, r3, r2
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <main+0x180>)
 8000724:	0010      	movs	r0, r2
 8000726:	0019      	movs	r1, r3
 8000728:	2302      	movs	r3, #2
 800072a:	001a      	movs	r2, r3
 800072c:	f004 f8bc 	bl	80048a8 <memcpy>
		  }
		  if (all_source.wake_up_src.z_wu)
 8000730:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <main+0x174>)
 8000732:	785b      	ldrb	r3, [r3, #1]
 8000734:	2201      	movs	r2, #1
 8000736:	4013      	ands	r3, r2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00e      	beq.n	800075c <main+0x11c>
		  {
			  strcat((char *)tx_buffer, "Z");
 800073e:	003b      	movs	r3, r7
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff fcdf 	bl	8000104 <strlen>
 8000746:	0003      	movs	r3, r0
 8000748:	001a      	movs	r2, r3
 800074a:	003b      	movs	r3, r7
 800074c:	189a      	adds	r2, r3, r2
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <main+0x184>)
 8000750:	0010      	movs	r0, r2
 8000752:	0019      	movs	r1, r3
 8000754:	2302      	movs	r3, #2
 8000756:	001a      	movs	r2, r3
 8000758:	f004 f8a6 	bl	80048a8 <memcpy>
		  }
		  strcat((char *)tx_buffer, " direction\r\n");
 800075c:	003b      	movs	r3, r7
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff fcd0 	bl	8000104 <strlen>
 8000764:	0003      	movs	r3, r0
 8000766:	001a      	movs	r2, r3
 8000768:	003b      	movs	r3, r7
 800076a:	189a      	adds	r2, r3, r2
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <main+0x188>)
 800076e:	0010      	movs	r0, r2
 8000770:	0019      	movs	r1, r3
 8000772:	230d      	movs	r3, #13
 8000774:	001a      	movs	r2, r3
 8000776:	f004 f897 	bl	80048a8 <memcpy>
		  HAL_UART_Transmit(&huart2, tx_buffer, strlen((char const *)tx_buffer) , 1000 ) ;
 800077a:	003b      	movs	r3, r7
 800077c:	0018      	movs	r0, r3
 800077e:	f7ff fcc1 	bl	8000104 <strlen>
 8000782:	0003      	movs	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	23fa      	movs	r3, #250	; 0xfa
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	0039      	movs	r1, r7
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <main+0x15c>)
 800078e:	f002 feb9 	bl	8003504 <HAL_UART_Transmit>
	  if (all_source.wake_up_src.wu_ia)
 8000792:	e794      	b.n	80006be <main+0x7e>
 8000794:	fffffc14 	.word	0xfffffc14
 8000798:	20000000 	.word	0x20000000
 800079c:	2000010c 	.word	0x2000010c
 80007a0:	200001a0 	.word	0x200001a0
 80007a4:	08000b15 	.word	0x08000b15
 80007a8:	08000b85 	.word	0x08000b85
 80007ac:	200000a8 	.word	0x200000a8
 80007b0:	fffffc18 	.word	0xfffffc18
 80007b4:	200001b0 	.word	0x200001b0
 80007b8:	08005188 	.word	0x08005188
 80007bc:	0800519c 	.word	0x0800519c
 80007c0:	080051a0 	.word	0x080051a0
 80007c4:	080051a4 	.word	0x080051a4
 80007c8:	080051a8 	.word	0x080051a8

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b093      	sub	sp, #76	; 0x4c
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	2410      	movs	r4, #16
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	0018      	movs	r0, r3
 80007d8:	2338      	movs	r3, #56	; 0x38
 80007da:	001a      	movs	r2, r3
 80007dc:	2100      	movs	r1, #0
 80007de:	f004 f82f 	bl	8004840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e2:	003b      	movs	r3, r7
 80007e4:	0018      	movs	r0, r3
 80007e6:	2310      	movs	r3, #16
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f004 f828 	bl	8004840 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f000 ff15 	bl	8001624 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007fa:	f000 ff05 	bl	8001608 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <SystemClock_Config+0xa8>)
 8000800:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <SystemClock_Config+0xa8>)
 8000804:	2118      	movs	r1, #24
 8000806:	438a      	bics	r2, r1
 8000808:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2206      	movs	r2, #6
 800080e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2201      	movs	r2, #1
 8000814:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2240      	movs	r2, #64	; 0x40
 8000828:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	193b      	adds	r3, r7, r4
 8000832:	0018      	movs	r0, r3
 8000834:	f000 ff42 	bl	80016bc <HAL_RCC_OscConfig>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800083c:	f000 fa07 	bl	8000c4e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	003b      	movs	r3, r7
 8000842:	2207      	movs	r2, #7
 8000844:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000846:	003b      	movs	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	003b      	movs	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000852:	003b      	movs	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000858:	003b      	movs	r3, r7
 800085a:	2100      	movs	r1, #0
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fa47 	bl	8001cf0 <HAL_RCC_ClockConfig>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000866:	f000 f9f2 	bl	8000c4e <Error_Handler>
  }
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b013      	add	sp, #76	; 0x4c
 8000870:	bd90      	pop	{r4, r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40021000 	.word	0x40021000

08000878 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_RTC_Init+0x54>)
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <MX_RTC_Init+0x58>)
 8000880:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_RTC_Init+0x54>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_RTC_Init+0x54>)
 800088a:	227f      	movs	r2, #127	; 0x7f
 800088c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_RTC_Init+0x54>)
 8000890:	22ff      	movs	r2, #255	; 0xff
 8000892:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_RTC_Init+0x54>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_RTC_Init+0x54>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_RTC_Init+0x54>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_RTC_Init+0x54>)
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	05d2      	lsls	r2, r2, #23
 80008ac:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_RTC_Init+0x54>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <MX_RTC_Init+0x54>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fd7c 	bl	80023b4 <HAL_RTC_Init>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 f9c5 	bl	8000c4e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	2000007c 	.word	0x2000007c
 80008d0:	40002800 	.word	0x40002800

080008d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_SPI1_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <MX_SPI1_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_SPI1_Init+0x74>)
 80008e0:	2282      	movs	r2, #130	; 0x82
 80008e2:	0052      	lsls	r2, r2, #1
 80008e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_SPI1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_SPI1_Init+0x74>)
 80008ee:	22e0      	movs	r2, #224	; 0xe0
 80008f0:	00d2      	lsls	r2, r2, #3
 80008f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_SPI1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_SPI1_Init+0x74>)
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	0092      	lsls	r2, r2, #2
 8000906:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_SPI1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_SPI1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_SPI1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_SPI1_Init+0x74>)
 8000922:	2207      	movs	r2, #7
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_SPI1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_SPI1_Init+0x74>)
 800092e:	2208      	movs	r2, #8
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <MX_SPI1_Init+0x74>)
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fe8d 	bl	8002654 <HAL_SPI_Init>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 f986 	bl	8000c4e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000a8 	.word	0x200000a8
 800094c:	40013000 	.word	0x40013000

08000950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000956:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <MX_USART2_UART_Init+0x98>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 800095c:	22e1      	movs	r2, #225	; 0xe1
 800095e:	0252      	lsls	r2, r2, #9
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 800099a:	0018      	movs	r0, r3
 800099c:	f002 fd5c 	bl	8003458 <HAL_UART_Init>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 f953 	bl	8000c4e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 80009aa:	2100      	movs	r1, #0
 80009ac:	0018      	movs	r0, r3
 80009ae:	f003 fb07 	bl	8003fc0 <HAL_UARTEx_SetTxFifoThreshold>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f000 f94a 	bl	8000c4e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 80009bc:	2100      	movs	r1, #0
 80009be:	0018      	movs	r0, r3
 80009c0:	f003 fb3e 	bl	8004040 <HAL_UARTEx_SetRxFifoThreshold>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f000 f941 	bl	8000c4e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f003 fabc 	bl	8003f4c <HAL_UARTEx_DisableFifoMode>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f939 	bl	8000c4e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	2000010c 	.word	0x2000010c
 80009e8:	40004400 	.word	0x40004400

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b08b      	sub	sp, #44	; 0x2c
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	2414      	movs	r4, #20
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	0018      	movs	r0, r3
 80009f8:	2314      	movs	r3, #20
 80009fa:	001a      	movs	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f003 ff1f 	bl	8004840 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b42      	ldr	r3, [pc, #264]	; (8000b0c <MX_GPIO_Init+0x120>)
 8000a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a06:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <MX_GPIO_Init+0x120>)
 8000a08:	2104      	movs	r1, #4
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0e:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <MX_GPIO_Init+0x120>)
 8000a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a12:	2204      	movs	r2, #4
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1a:	4b3c      	ldr	r3, [pc, #240]	; (8000b0c <MX_GPIO_Init+0x120>)
 8000a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1e:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <MX_GPIO_Init+0x120>)
 8000a20:	2120      	movs	r1, #32
 8000a22:	430a      	orrs	r2, r1
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
 8000a26:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <MX_GPIO_Init+0x120>)
 8000a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2a:	2220      	movs	r2, #32
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <MX_GPIO_Init+0x120>)
 8000a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a36:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <MX_GPIO_Init+0x120>)
 8000a38:	2101      	movs	r1, #1
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a3e:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <MX_GPIO_Init+0x120>)
 8000a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a42:	2201      	movs	r2, #1
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <MX_GPIO_Init+0x120>)
 8000a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <MX_GPIO_Init+0x120>)
 8000a50:	2102      	movs	r1, #2
 8000a52:	430a      	orrs	r2, r1
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
 8000a56:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <MX_GPIO_Init+0x120>)
 8000a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG_GPIO_Port, LDG_Pin, GPIO_PIN_RESET);
 8000a62:	23a0      	movs	r3, #160	; 0xa0
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	2200      	movs	r2, #0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fd7a 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	01db      	lsls	r3, r3, #7
 8000a74:	4826      	ldr	r0, [pc, #152]	; (8000b10 <MX_GPIO_Init+0x124>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	0019      	movs	r1, r3
 8000a7a:	f000 fd73 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LDG_Pin */
  GPIO_InitStruct.Pin = LDG_Pin;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2220      	movs	r2, #32
 8000a82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2201      	movs	r2, #1
 8000a88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2202      	movs	r2, #2
 8000a94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 8000a96:	193a      	adds	r2, r7, r4
 8000a98:	23a0      	movs	r3, #160	; 0xa0
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	0011      	movs	r1, r2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fbfc 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000aa4:	0021      	movs	r1, r4
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	01d2      	lsls	r2, r2, #7
 8000aac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	000c      	movs	r4, r1
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_GPIO_Init+0x124>)
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	0010      	movs	r0, r2
 8000aca:	f000 fbe7 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_INT1_Pin ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin|ACC_INT2_Pin;
 8000ace:	0021      	movs	r1, r4
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	22c0      	movs	r2, #192	; 0xc0
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2288      	movs	r2, #136	; 0x88
 8000adc:	0352      	lsls	r2, r2, #13
 8000ade:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <MX_GPIO_Init+0x124>)
 8000aea:	0019      	movs	r1, r3
 8000aec:	0010      	movs	r0, r2
 8000aee:	f000 fbd5 	bl	800129c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2101      	movs	r1, #1
 8000af6:	2007      	movs	r0, #7
 8000af8:	f000 fb9e 	bl	8001238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000afc:	2007      	movs	r0, #7
 8000afe:	f000 fbb0 	bl	8001262 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b00b      	add	sp, #44	; 0x2c
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	50000400 	.word	0x50000400

08000b14 <my_lis2dw12_platform_write>:

/* USER CODE BEGIN 4 */
int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8000b14:	b5b0      	push	{r4, r5, r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	607a      	str	r2, [r7, #4]
 8000b20:	0019      	movs	r1, r3
 8000b22:	240b      	movs	r4, #11
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	1c02      	adds	r2, r0, #0
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	2508      	movs	r5, #8
 8000b2c:	197b      	adds	r3, r7, r5
 8000b2e:	1c0a      	adds	r2, r1, #0
 8000b30:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	01db      	lsls	r3, r3, #7
 8000b36:	4812      	ldr	r0, [pc, #72]	; (8000b80 <my_lis2dw12_platform_write+0x6c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	f000 fd12 	bl	8001564 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8000b40:	2014      	movs	r0, #20
 8000b42:	f000 faa9 	bl	8001098 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8000b46:	23fa      	movs	r3, #250	; 0xfa
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	1939      	adds	r1, r7, r4
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f001 fe38 	bl	80027c4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8000b54:	23fa      	movs	r3, #250	; 0xfa
 8000b56:	009c      	lsls	r4, r3, #2
 8000b58:	197b      	adds	r3, r7, r5
 8000b5a:	881a      	ldrh	r2, [r3, #0]
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	0023      	movs	r3, r4
 8000b62:	f001 fe2f 	bl	80027c4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_SET) ;
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	01db      	lsls	r3, r3, #7
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <my_lis2dw12_platform_write+0x6c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	0019      	movs	r1, r3
 8000b70:	f000 fcf8 	bl	8001564 <HAL_GPIO_WritePin>

	return 0;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	50000400 	.word	0x50000400

08000b84 <my_lis2dw12_platform_read>:
int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8000b84:	b5b0      	push	{r4, r5, r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	0008      	movs	r0, r1
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	0019      	movs	r1, r3
 8000b92:	240b      	movs	r4, #11
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	1c02      	adds	r2, r0, #0
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	2508      	movs	r5, #8
 8000b9c:	197b      	adds	r3, r7, r5
 8000b9e:	1c0a      	adds	r2, r1, #0
 8000ba0:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2280      	movs	r2, #128	; 0x80
 8000ba8:	4252      	negs	r2, r2
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_RESET) ;
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	4812      	ldr	r0, [pc, #72]	; (8000c00 <my_lis2dw12_platform_read+0x7c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	0019      	movs	r1, r3
 8000bbc:	f000 fcd2 	bl	8001564 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8000bc0:	2014      	movs	r0, #20
 8000bc2:	f000 fa69 	bl	8001098 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8000bc6:	23fa      	movs	r3, #250	; 0xfa
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	1939      	adds	r1, r7, r4
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f001 fdf8 	bl	80027c4 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8000bd4:	23fa      	movs	r3, #250	; 0xfa
 8000bd6:	009c      	lsls	r4, r3, #2
 8000bd8:	197b      	adds	r3, r7, r5
 8000bda:	881a      	ldrh	r2, [r3, #0]
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	0023      	movs	r3, r4
 8000be2:	f001 ff47 	bl	8002a74 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( SPI1_CS_GPIO_Port , SPI1_CS_Pin , GPIO_PIN_SET) ;
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	01db      	lsls	r3, r3, #7
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <my_lis2dw12_platform_read+0x7c>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	0019      	movs	r1, r3
 8000bf0:	f000 fcb8 	bl	8001564 <HAL_GPIO_WritePin>

	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	50000400 	.word	0x50000400

08000c04 <send_2_dbg>:
void send_2_dbg ( uint8_t* buff )
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit ( HUART_DBG , buff , strlen ( (char*) buff ) , UART_TIMEOUT ) ;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fa78 	bl	8000104 <strlen>
 8000c14:	0003      	movs	r3, r0
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	23fa      	movs	r3, #250	; 0xfa
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <send_2_dbg+0x28>)
 8000c20:	f002 fc70 	bl	8003504 <HAL_UART_Transmit>
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000010c 	.word	0x2000010c

08000c30 <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	0002      	movs	r2, r0
 8000c38:	1dbb      	adds	r3, r7, #6
 8000c3a:	801a      	strh	r2, [r3, #0]
	send_2_dbg ( (uint8_t*) GPIO_Pin ) ;
 8000c3c:	1dbb      	adds	r3, r7, #6
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff ffdf 	bl	8000c04 <send_2_dbg>
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c52:	b672      	cpsid	i
}
 8000c54:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <Error_Handler+0x8>

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x44>)
 8000c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_MspInit+0x44>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	430a      	orrs	r2, r1
 8000c68:	641a      	str	r2, [r3, #64]	; 0x40
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_MspInit+0x44>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4013      	ands	r3, r2
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x44>)
 8000c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_MspInit+0x44>)
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	0549      	lsls	r1, r1, #21
 8000c80:	430a      	orrs	r2, r1
 8000c82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_MspInit+0x44>)
 8000c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	055b      	lsls	r3, r3, #21
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b091      	sub	sp, #68	; 0x44
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	240c      	movs	r4, #12
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	0018      	movs	r0, r3
 8000cae:	2334      	movs	r3, #52	; 0x34
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f003 fdc4 	bl	8004840 <memset>
  if(hrtc->Instance==RTC)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <HAL_RTC_MspInit+0x74>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d124      	bne.n	8000d0c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	0292      	lsls	r2, r2, #10
 8000cc8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	0052      	lsls	r2, r2, #1
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f001 f9b5 	bl	8002044 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000cde:	f7ff ffb6 	bl	8000c4e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_RTC_MspInit+0x78>)
 8000ce4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_RTC_MspInit+0x78>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	0209      	lsls	r1, r1, #8
 8000cec:	430a      	orrs	r2, r1
 8000cee:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_RTC_MspInit+0x78>)
 8000cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_RTC_MspInit+0x78>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	00c9      	lsls	r1, r1, #3
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_RTC_MspInit+0x78>)
 8000d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	4013      	ands	r3, r2
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b011      	add	sp, #68	; 0x44
 8000d12:	bd90      	pop	{r4, r7, pc}
 8000d14:	40002800 	.word	0x40002800
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b08b      	sub	sp, #44	; 0x2c
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	2414      	movs	r4, #20
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	0018      	movs	r0, r3
 8000d2a:	2314      	movs	r3, #20
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	2100      	movs	r1, #0
 8000d30:	f003 fd86 	bl	8004840 <memset>
  if(hspi->Instance==SPI1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <HAL_SPI_MspInit+0x8c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d12f      	bne.n	8000d9e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <HAL_SPI_MspInit+0x90>)
 8000d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_SPI_MspInit+0x90>)
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	0149      	lsls	r1, r1, #5
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_SPI_MspInit+0x90>)
 8000d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	015b      	lsls	r3, r3, #5
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_SPI_MspInit+0x90>)
 8000d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_SPI_MspInit+0x90>)
 8000d60:	2102      	movs	r1, #2
 8000d62:	430a      	orrs	r2, r1
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_SPI_MspInit+0x90>)
 8000d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d72:	0021      	movs	r1, r4
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2238      	movs	r2, #56	; 0x38
 8000d78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_SPI_MspInit+0x94>)
 8000d96:	0019      	movs	r1, r3
 8000d98:	0010      	movs	r0, r2
 8000d9a:	f000 fa7f 	bl	800129c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b00b      	add	sp, #44	; 0x2c
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	40013000 	.word	0x40013000
 8000dac:	40021000 	.word	0x40021000
 8000db0:	50000400 	.word	0x50000400

08000db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b097      	sub	sp, #92	; 0x5c
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	2344      	movs	r3, #68	; 0x44
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	2314      	movs	r3, #20
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	f003 fd3a 	bl	8004840 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	2410      	movs	r4, #16
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	2334      	movs	r3, #52	; 0x34
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f003 fd32 	bl	8004840 <memset>
  if(huart->Instance==USART2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a22      	ldr	r2, [pc, #136]	; (8000e6c <HAL_UART_MspInit+0xb8>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d13e      	bne.n	8000e64 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	2202      	movs	r2, #2
 8000dea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	0018      	movs	r0, r3
 8000df6:	f001 f925 	bl	8002044 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dfe:	f7ff ff26 	bl	8000c4e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_UART_MspInit+0xbc>)
 8000e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_UART_MspInit+0xbc>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	0289      	lsls	r1, r1, #10
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_UART_MspInit+0xbc>)
 8000e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	029b      	lsls	r3, r3, #10
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_UART_MspInit+0xbc>)
 8000e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <HAL_UART_MspInit+0xbc>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	430a      	orrs	r2, r1
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_UART_MspInit+0xbc>)
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000e36:	2144      	movs	r1, #68	; 0x44
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2202      	movs	r2, #2
 8000e42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2201      	movs	r2, #1
 8000e48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2201      	movs	r2, #1
 8000e54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	187a      	adds	r2, r7, r1
 8000e58:	23a0      	movs	r3, #160	; 0xa0
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 fa1c 	bl	800129c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b017      	add	sp, #92	; 0x5c
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	40004400 	.word	0x40004400
 8000e70:	40021000 	.word	0x40021000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f8e2 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 fb78 	bl	80015a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 fb73 	bl	80015a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	18d3      	adds	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f003 fcae 	bl	8004850 <__errno>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	425b      	negs	r3, r3
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	18d2      	adds	r2, r2, r3
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <_sbrk+0x64>)
 8000f10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b006      	add	sp, #24
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20009000 	.word	0x20009000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	200001b8 	.word	0x200001b8
 8000f28:	20000308 	.word	0x20000308

08000f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f3c:	f7ff fff6 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	; (8000f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <LoopForever+0xe>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	; (8000f84 <LoopForever+0x16>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f66:	f003 fc79 	bl	800485c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f6a:	f7ff fb69 	bl	8000640 <main>

08000f6e <LoopForever>:

LoopForever:
  b LoopForever
 8000f6e:	e7fe      	b.n	8000f6e <LoopForever>
  ldr   r0, =_estack
 8000f70:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f7c:	08005284 	.word	0x08005284
  ldr r2, =_sbss
 8000f80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f84:	20000308 	.word	0x20000308

08000f88 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_COMP_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x3c>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_Init+0x3c>)
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	0049      	lsls	r1, r1, #1
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f810 	bl	8000fcc <HAL_InitTick>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e001      	b.n	8000fbc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff fe4e 	bl	8000c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	781b      	ldrb	r3, [r3, #0]
}
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40022000 	.word	0x40022000

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_InitTick+0x88>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d02b      	beq.n	800103c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_InitTick+0x8c>)
 8000fe6:	681c      	ldr	r4, [r3, #0]
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <HAL_InitTick+0x88>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	0019      	movs	r1, r3
 8000fee:	23fa      	movs	r3, #250	; 0xfa
 8000ff0:	0098      	lsls	r0, r3, #2
 8000ff2:	f7ff f899 	bl	8000128 <__udivsi3>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	0020      	movs	r0, r4
 8000ffc:	f7ff f894 	bl	8000128 <__udivsi3>
 8001000:	0003      	movs	r3, r0
 8001002:	0018      	movs	r0, r3
 8001004:	f000 f93d 	bl	8001282 <HAL_SYSTICK_Config>
 8001008:	1e03      	subs	r3, r0, #0
 800100a:	d112      	bne.n	8001032 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b03      	cmp	r3, #3
 8001010:	d80a      	bhi.n	8001028 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	2301      	movs	r3, #1
 8001016:	425b      	negs	r3, r3
 8001018:	2200      	movs	r2, #0
 800101a:	0018      	movs	r0, r3
 800101c:	f000 f90c 	bl	8001238 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_InitTick+0x90>)
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e00d      	b.n	8001044 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001028:	230f      	movs	r3, #15
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	e008      	b.n	8001044 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001032:	230f      	movs	r3, #15
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e003      	b.n	8001044 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800103c:	230f      	movs	r3, #15
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001044:	230f      	movs	r3, #15
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	781b      	ldrb	r3, [r3, #0]
}
 800104a:	0018      	movs	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	b005      	add	sp, #20
 8001050:	bd90      	pop	{r4, r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	2000000c 	.word	0x2000000c
 8001058:	20000004 	.word	0x20000004
 800105c:	20000008 	.word	0x20000008

08001060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_IncTick+0x1c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	001a      	movs	r2, r3
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_IncTick+0x20>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	18d2      	adds	r2, r2, r3
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_IncTick+0x20>)
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	2000000c 	.word	0x2000000c
 8001080:	200001bc 	.word	0x200001bc

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <HAL_GetTick+0x10>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	200001bc 	.word	0x200001bc

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff fff0 	bl	8001084 <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3301      	adds	r3, #1
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	001a      	movs	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	189b      	adds	r3, r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	f7ff ffe0 	bl	8001084 <HAL_GetTick>
 80010c4:	0002      	movs	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b004      	add	sp, #16
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	2000000c 	.word	0x2000000c

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	0002      	movs	r2, r0
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b7f      	cmp	r3, #127	; 0x7f
 80010f2:	d809      	bhi.n	8001108 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	001a      	movs	r2, r3
 80010fa:	231f      	movs	r3, #31
 80010fc:	401a      	ands	r2, r3
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_EnableIRQ+0x30>)
 8001100:	2101      	movs	r1, #1
 8001102:	4091      	lsls	r1, r2
 8001104:	000a      	movs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	0002      	movs	r2, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b7f      	cmp	r3, #127	; 0x7f
 8001128:	d828      	bhi.n	800117c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112a:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <__NVIC_SetPriority+0xd4>)
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b25b      	sxtb	r3, r3
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	33c0      	adds	r3, #192	; 0xc0
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	589b      	ldr	r3, [r3, r2]
 800113a:	1dfa      	adds	r2, r7, #7
 800113c:	7812      	ldrb	r2, [r2, #0]
 800113e:	0011      	movs	r1, r2
 8001140:	2203      	movs	r2, #3
 8001142:	400a      	ands	r2, r1
 8001144:	00d2      	lsls	r2, r2, #3
 8001146:	21ff      	movs	r1, #255	; 0xff
 8001148:	4091      	lsls	r1, r2
 800114a:	000a      	movs	r2, r1
 800114c:	43d2      	mvns	r2, r2
 800114e:	401a      	ands	r2, r3
 8001150:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	019b      	lsls	r3, r3, #6
 8001156:	22ff      	movs	r2, #255	; 0xff
 8001158:	401a      	ands	r2, r3
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	0018      	movs	r0, r3
 8001160:	2303      	movs	r3, #3
 8001162:	4003      	ands	r3, r0
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001168:	481f      	ldr	r0, [pc, #124]	; (80011e8 <__NVIC_SetPriority+0xd4>)
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b25b      	sxtb	r3, r3
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	430a      	orrs	r2, r1
 8001174:	33c0      	adds	r3, #192	; 0xc0
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800117a:	e031      	b.n	80011e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <__NVIC_SetPriority+0xd8>)
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	0019      	movs	r1, r3
 8001184:	230f      	movs	r3, #15
 8001186:	400b      	ands	r3, r1
 8001188:	3b08      	subs	r3, #8
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3306      	adds	r3, #6
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	18d3      	adds	r3, r2, r3
 8001192:	3304      	adds	r3, #4
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1dfa      	adds	r2, r7, #7
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	0011      	movs	r1, r2
 800119c:	2203      	movs	r2, #3
 800119e:	400a      	ands	r2, r1
 80011a0:	00d2      	lsls	r2, r2, #3
 80011a2:	21ff      	movs	r1, #255	; 0xff
 80011a4:	4091      	lsls	r1, r2
 80011a6:	000a      	movs	r2, r1
 80011a8:	43d2      	mvns	r2, r2
 80011aa:	401a      	ands	r2, r3
 80011ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	019b      	lsls	r3, r3, #6
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	401a      	ands	r2, r3
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	0018      	movs	r0, r3
 80011bc:	2303      	movs	r3, #3
 80011be:	4003      	ands	r3, r0
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <__NVIC_SetPriority+0xd8>)
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	001c      	movs	r4, r3
 80011cc:	230f      	movs	r3, #15
 80011ce:	4023      	ands	r3, r4
 80011d0:	3b08      	subs	r3, #8
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	430a      	orrs	r2, r1
 80011d6:	3306      	adds	r3, #6
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	18c3      	adds	r3, r0, r3
 80011dc:	3304      	adds	r3, #4
 80011de:	601a      	str	r2, [r3, #0]
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b003      	add	sp, #12
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	1e5a      	subs	r2, r3, #1
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	045b      	lsls	r3, r3, #17
 8001200:	429a      	cmp	r2, r3
 8001202:	d301      	bcc.n	8001208 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001204:	2301      	movs	r3, #1
 8001206:	e010      	b.n	800122a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <SysTick_Config+0x44>)
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	3a01      	subs	r2, #1
 800120e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001210:	2301      	movs	r3, #1
 8001212:	425b      	negs	r3, r3
 8001214:	2103      	movs	r1, #3
 8001216:	0018      	movs	r0, r3
 8001218:	f7ff ff7c 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <SysTick_Config+0x44>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SysTick_Config+0x44>)
 8001224:	2207      	movs	r2, #7
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001228:	2300      	movs	r3, #0
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	210f      	movs	r1, #15
 8001244:	187b      	adds	r3, r7, r1
 8001246:	1c02      	adds	r2, r0, #0
 8001248:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	187b      	adds	r3, r7, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b25b      	sxtb	r3, r3
 8001252:	0011      	movs	r1, r2
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ff5d 	bl	8001114 <__NVIC_SetPriority>
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b004      	add	sp, #16
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	0002      	movs	r2, r0
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff ff33 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff ffaf 	bl	80011f0 <SysTick_Config>
 8001292:	0003      	movs	r3, r0
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012aa:	e147      	b.n	800153c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2101      	movs	r1, #1
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4091      	lsls	r1, r2
 80012b6:	000a      	movs	r2, r1
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d100      	bne.n	80012c4 <HAL_GPIO_Init+0x28>
 80012c2:	e138      	b.n	8001536 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2203      	movs	r2, #3
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d005      	beq.n	80012dc <HAL_GPIO_Init+0x40>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2203      	movs	r2, #3
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d130      	bne.n	800133e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	409a      	lsls	r2, r3
 80012ea:	0013      	movs	r3, r2
 80012ec:	43da      	mvns	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	409a      	lsls	r2, r3
 80012fe:	0013      	movs	r3, r2
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001312:	2201      	movs	r2, #1
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	43da      	mvns	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	2201      	movs	r2, #1
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
 8001330:	0013      	movs	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2203      	movs	r2, #3
 8001344:	4013      	ands	r3, r2
 8001346:	2b03      	cmp	r3, #3
 8001348:	d017      	beq.n	800137a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	43da      	mvns	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	409a      	lsls	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2203      	movs	r2, #3
 8001380:	4013      	ands	r3, r2
 8001382:	2b02      	cmp	r3, #2
 8001384:	d123      	bne.n	80013ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	08da      	lsrs	r2, r3, #3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3208      	adds	r2, #8
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	58d3      	ldr	r3, [r2, r3]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2207      	movs	r2, #7
 8001398:	4013      	ands	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	43da      	mvns	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	691a      	ldr	r2, [r3, #16]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2107      	movs	r1, #7
 80013b2:	400b      	ands	r3, r1
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	409a      	lsls	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	08da      	lsrs	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3208      	adds	r2, #8
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	6939      	ldr	r1, [r7, #16]
 80013cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	2203      	movs	r2, #3
 80013da:	409a      	lsls	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	43da      	mvns	r2, r3
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2203      	movs	r2, #3
 80013ec:	401a      	ands	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	23c0      	movs	r3, #192	; 0xc0
 8001408:	029b      	lsls	r3, r3, #10
 800140a:	4013      	ands	r3, r2
 800140c:	d100      	bne.n	8001410 <HAL_GPIO_Init+0x174>
 800140e:	e092      	b.n	8001536 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001410:	4a50      	ldr	r2, [pc, #320]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3318      	adds	r3, #24
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	589b      	ldr	r3, [r3, r2]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2203      	movs	r2, #3
 8001422:	4013      	ands	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	220f      	movs	r2, #15
 8001428:	409a      	lsls	r2, r3
 800142a:	0013      	movs	r3, r2
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	23a0      	movs	r3, #160	; 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	429a      	cmp	r2, r3
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0x1ca>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a45      	ldr	r2, [pc, #276]	; (8001558 <HAL_GPIO_Init+0x2bc>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00d      	beq.n	8001462 <HAL_GPIO_Init+0x1c6>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a44      	ldr	r2, [pc, #272]	; (800155c <HAL_GPIO_Init+0x2c0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x1c2>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a43      	ldr	r2, [pc, #268]	; (8001560 <HAL_GPIO_Init+0x2c4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_GPIO_Init+0x1be>
 8001456:	2303      	movs	r3, #3
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x1cc>
 800145a:	2305      	movs	r3, #5
 800145c:	e004      	b.n	8001468 <HAL_GPIO_Init+0x1cc>
 800145e:	2302      	movs	r3, #2
 8001460:	e002      	b.n	8001468 <HAL_GPIO_Init+0x1cc>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_GPIO_Init+0x1cc>
 8001466:	2300      	movs	r3, #0
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	2103      	movs	r1, #3
 800146c:	400a      	ands	r2, r1
 800146e:	00d2      	lsls	r2, r2, #3
 8001470:	4093      	lsls	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001478:	4936      	ldr	r1, [pc, #216]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3318      	adds	r3, #24
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001486:	4b33      	ldr	r3, [pc, #204]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	035b      	lsls	r3, r3, #13
 800149e:	4013      	ands	r3, r2
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014aa:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43da      	mvns	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	039b      	lsls	r3, r3, #14
 80014c8:	4013      	ands	r3, r2
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014da:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 80014dc:	2384      	movs	r3, #132	; 0x84
 80014de:	58d3      	ldr	r3, [r2, r3]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43da      	mvns	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	029b      	lsls	r3, r3, #10
 80014f4:	4013      	ands	r3, r2
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001500:	4914      	ldr	r1, [pc, #80]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 8001502:	2284      	movs	r2, #132	; 0x84
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	58d3      	ldr	r3, [r2, r3]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43da      	mvns	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	025b      	lsls	r3, r3, #9
 8001522:	4013      	ands	r3, r2
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800152e:	4909      	ldr	r1, [pc, #36]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	40da      	lsrs	r2, r3
 8001544:	1e13      	subs	r3, r2, #0
 8001546:	d000      	beq.n	800154a <HAL_GPIO_Init+0x2ae>
 8001548:	e6b0      	b.n	80012ac <HAL_GPIO_Init+0x10>
  }
}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b006      	add	sp, #24
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021800 	.word	0x40021800
 8001558:	50000400 	.word	0x50000400
 800155c:	50000800 	.word	0x50000800
 8001560:	50000c00 	.word	0x50000c00

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	0008      	movs	r0, r1
 800156e:	0011      	movs	r1, r2
 8001570:	1cbb      	adds	r3, r7, #2
 8001572:	1c02      	adds	r2, r0, #0
 8001574:	801a      	strh	r2, [r3, #0]
 8001576:	1c7b      	adds	r3, r7, #1
 8001578:	1c0a      	adds	r2, r1, #0
 800157a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800157c:	1c7b      	adds	r3, r7, #1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001584:	1cbb      	adds	r3, r7, #2
 8001586:	881a      	ldrh	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800158c:	e003      	b.n	8001596 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800158e:	1cbb      	adds	r3, r7, #2
 8001590:	881a      	ldrh	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	b002      	add	sp, #8
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	0002      	movs	r2, r0
 80015a8:	1dbb      	adds	r3, r7, #6
 80015aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	1dba      	adds	r2, r7, #6
 80015b2:	8812      	ldrh	r2, [r2, #0]
 80015b4:	4013      	ands	r3, r2
 80015b6:	d008      	beq.n	80015ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015ba:	1dba      	adds	r2, r7, #6
 80015bc:	8812      	ldrh	r2, [r2, #0]
 80015be:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80015c0:	1dbb      	adds	r3, r7, #6
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff fb33 	bl	8000c30 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	1dba      	adds	r2, r7, #6
 80015d0:	8812      	ldrh	r2, [r2, #0]
 80015d2:	4013      	ands	r3, r2
 80015d4:	d008      	beq.n	80015e8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015d8:	1dba      	adds	r2, r7, #6
 80015da:	8812      	ldrh	r2, [r2, #0]
 80015dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80015de:	1dbb      	adds	r3, r7, #6
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 f806 	bl	80015f4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b002      	add	sp, #8
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021800 	.word	0x40021800

080015f4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	0002      	movs	r2, r0
 80015fc:	1dbb      	adds	r3, r7, #6
 80015fe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <HAL_PWR_EnableBkUpAccess+0x18>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001612:	2180      	movs	r1, #128	; 0x80
 8001614:	0049      	lsls	r1, r1, #1
 8001616:	430a      	orrs	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40007000 	.word	0x40007000

08001624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001632:	4013      	ands	r3, r2
 8001634:	0019      	movs	r1, r3
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	429a      	cmp	r2, r3
 8001646:	d11f      	bne.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	0013      	movs	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	189b      	adds	r3, r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4912      	ldr	r1, [pc, #72]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001656:	0018      	movs	r0, r3
 8001658:	f7fe fd66 	bl	8000128 <__udivsi3>
 800165c:	0003      	movs	r3, r0
 800165e:	3301      	adds	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001662:	e008      	b.n	8001676 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3b01      	subs	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e001      	b.n	8001676 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e009      	b.n	800168a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	401a      	ands	r2, r3
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	429a      	cmp	r2, r3
 8001686:	d0ed      	beq.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b004      	add	sp, #16
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	40007000 	.word	0x40007000
 8001698:	fffff9ff 	.word	0xfffff9ff
 800169c:	20000004 	.word	0x20000004
 80016a0:	000f4240 	.word	0x000f4240

080016a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	23e0      	movs	r3, #224	; 0xe0
 80016ae:	01db      	lsls	r3, r3, #7
 80016b0:	4013      	ands	r3, r2
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000

080016bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e2fe      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2201      	movs	r2, #1
 80016d4:	4013      	ands	r3, r2
 80016d6:	d100      	bne.n	80016da <HAL_RCC_OscConfig+0x1e>
 80016d8:	e07c      	b.n	80017d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016da:	4bc3      	ldr	r3, [pc, #780]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2238      	movs	r2, #56	; 0x38
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e4:	4bc0      	ldr	r3, [pc, #768]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2203      	movs	r2, #3
 80016ea:	4013      	ands	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_OscConfig+0x3e>
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d002      	beq.n	8001700 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d10b      	bne.n	8001718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	4bb9      	ldr	r3, [pc, #740]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	029b      	lsls	r3, r3, #10
 8001708:	4013      	ands	r3, r2
 800170a:	d062      	beq.n	80017d2 <HAL_RCC_OscConfig+0x116>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d15e      	bne.n	80017d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e2d9      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	025b      	lsls	r3, r3, #9
 8001720:	429a      	cmp	r2, r3
 8001722:	d107      	bne.n	8001734 <HAL_RCC_OscConfig+0x78>
 8001724:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4baf      	ldr	r3, [pc, #700]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	0249      	lsls	r1, r1, #9
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e020      	b.n	8001776 <HAL_RCC_OscConfig+0xba>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	23a0      	movs	r3, #160	; 0xa0
 800173a:	02db      	lsls	r3, r3, #11
 800173c:	429a      	cmp	r2, r3
 800173e:	d10e      	bne.n	800175e <HAL_RCC_OscConfig+0xa2>
 8001740:	4ba9      	ldr	r3, [pc, #676]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4ba8      	ldr	r3, [pc, #672]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001746:	2180      	movs	r1, #128	; 0x80
 8001748:	02c9      	lsls	r1, r1, #11
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	4ba6      	ldr	r3, [pc, #664]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4ba5      	ldr	r3, [pc, #660]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	0249      	lsls	r1, r1, #9
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	e00b      	b.n	8001776 <HAL_RCC_OscConfig+0xba>
 800175e:	4ba2      	ldr	r3, [pc, #648]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4ba1      	ldr	r3, [pc, #644]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001764:	49a1      	ldr	r1, [pc, #644]	; (80019ec <HAL_RCC_OscConfig+0x330>)
 8001766:	400a      	ands	r2, r1
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	4b9f      	ldr	r3, [pc, #636]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b9e      	ldr	r3, [pc, #632]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001770:	499f      	ldr	r1, [pc, #636]	; (80019f0 <HAL_RCC_OscConfig+0x334>)
 8001772:	400a      	ands	r2, r1
 8001774:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d014      	beq.n	80017a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fc81 	bl	8001084 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff fc7c 	bl	8001084 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e298      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	4b93      	ldr	r3, [pc, #588]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	029b      	lsls	r3, r3, #10
 80017a2:	4013      	ands	r3, r2
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0xcc>
 80017a6:	e015      	b.n	80017d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fc6c 	bl	8001084 <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b2:	f7ff fc67 	bl	8001084 <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b64      	cmp	r3, #100	; 0x64
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e283      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c4:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	029b      	lsls	r3, r3, #10
 80017cc:	4013      	ands	r3, r2
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCC_OscConfig+0xf6>
 80017d0:	e000      	b.n	80017d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2202      	movs	r2, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d100      	bne.n	80017e0 <HAL_RCC_OscConfig+0x124>
 80017de:	e099      	b.n	8001914 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e0:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2238      	movs	r2, #56	; 0x38
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ea:	4b7f      	ldr	r3, [pc, #508]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2203      	movs	r2, #3
 80017f0:	4013      	ands	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	2b10      	cmp	r3, #16
 80017f8:	d102      	bne.n	8001800 <HAL_RCC_OscConfig+0x144>
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d002      	beq.n	8001806 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d135      	bne.n	8001872 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001806:	4b78      	ldr	r3, [pc, #480]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4013      	ands	r3, r2
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x162>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e256      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b72      	ldr	r3, [pc, #456]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4a74      	ldr	r2, [pc, #464]	; (80019f4 <HAL_RCC_OscConfig+0x338>)
 8001824:	4013      	ands	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	021a      	lsls	r2, r3, #8
 800182e:	4b6e      	ldr	r3, [pc, #440]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d112      	bne.n	8001860 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800183a:	4b6b      	ldr	r3, [pc, #428]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <HAL_RCC_OscConfig+0x33c>)
 8001840:	4013      	ands	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800184e:	4b66      	ldr	r3, [pc, #408]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0adb      	lsrs	r3, r3, #11
 8001854:	2207      	movs	r2, #7
 8001856:	4013      	ands	r3, r2
 8001858:	4a68      	ldr	r2, [pc, #416]	; (80019fc <HAL_RCC_OscConfig+0x340>)
 800185a:	40da      	lsrs	r2, r3
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_OscConfig+0x344>)
 800185e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_OscConfig+0x348>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff fbb1 	bl	8000fcc <HAL_InitTick>
 800186a:	1e03      	subs	r3, r0, #0
 800186c:	d051      	beq.n	8001912 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e22c      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d030      	beq.n	80018dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800187a:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a5e      	ldr	r2, [pc, #376]	; (80019f8 <HAL_RCC_OscConfig+0x33c>)
 8001880:	4013      	ands	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800188e:	4b56      	ldr	r3, [pc, #344]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0049      	lsls	r1, r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fbf2 	bl	8001084 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fbed 	bl	8001084 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e209      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b8:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4013      	ands	r3, r2
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a4a      	ldr	r2, [pc, #296]	; (80019f4 <HAL_RCC_OscConfig+0x338>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	021a      	lsls	r2, r3, #8
 80018d4:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	e01b      	b.n	8001914 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018dc:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018e2:	4949      	ldr	r1, [pc, #292]	; (8001a08 <HAL_RCC_OscConfig+0x34c>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff fbcc 	bl	8001084 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff fbc7 	bl	8001084 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1e3      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001904:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4013      	ands	r3, r2
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x236>
 8001910:	e000      	b.n	8001914 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001912:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2208      	movs	r2, #8
 800191a:	4013      	ands	r3, r2
 800191c:	d047      	beq.n	80019ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800191e:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2238      	movs	r2, #56	; 0x38
 8001924:	4013      	ands	r3, r2
 8001926:	2b18      	cmp	r3, #24
 8001928:	d10a      	bne.n	8001940 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192e:	2202      	movs	r2, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d03c      	beq.n	80019ae <HAL_RCC_OscConfig+0x2f2>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d138      	bne.n	80019ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e1c5      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d019      	beq.n	800197c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800194a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800194e:	2101      	movs	r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fb96 	bl	8001084 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff fb91 	bl	8001084 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1ad      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d0f1      	beq.n	800195e <HAL_RCC_OscConfig+0x2a2>
 800197a:	e018      	b.n	80019ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800197e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001982:	2101      	movs	r1, #1
 8001984:	438a      	bics	r2, r1
 8001986:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fb7c 	bl	8001084 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001992:	f7ff fb77 	bl	8001084 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e193      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a8:	2202      	movs	r2, #2
 80019aa:	4013      	ands	r3, r2
 80019ac:	d1f1      	bne.n	8001992 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2204      	movs	r2, #4
 80019b4:	4013      	ands	r3, r2
 80019b6:	d100      	bne.n	80019ba <HAL_RCC_OscConfig+0x2fe>
 80019b8:	e0c6      	b.n	8001b48 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ba:	231f      	movs	r3, #31
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2238      	movs	r2, #56	; 0x38
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d11e      	bne.n	8001a0c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d100      	bne.n	80019da <HAL_RCC_OscConfig+0x31e>
 80019d8:	e0b6      	b.n	8001b48 <HAL_RCC_OscConfig+0x48c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d000      	beq.n	80019e4 <HAL_RCC_OscConfig+0x328>
 80019e2:	e0b1      	b.n	8001b48 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e171      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
 80019e8:	40021000 	.word	0x40021000
 80019ec:	fffeffff 	.word	0xfffeffff
 80019f0:	fffbffff 	.word	0xfffbffff
 80019f4:	ffff80ff 	.word	0xffff80ff
 80019f8:	ffffc7ff 	.word	0xffffc7ff
 80019fc:	00f42400 	.word	0x00f42400
 8001a00:	20000004 	.word	0x20000004
 8001a04:	20000008 	.word	0x20000008
 8001a08:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a0c:	4bb1      	ldr	r3, [pc, #708]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	055b      	lsls	r3, r3, #21
 8001a14:	4013      	ands	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_OscConfig+0x360>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x362>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d011      	beq.n	8001a46 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	4bac      	ldr	r3, [pc, #688]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a26:	4bab      	ldr	r3, [pc, #684]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0549      	lsls	r1, r1, #21
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a30:	4ba8      	ldr	r3, [pc, #672]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	055b      	lsls	r3, r3, #21
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a3e:	231f      	movs	r3, #31
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a46:	4ba4      	ldr	r3, [pc, #656]	; (8001cd8 <HAL_RCC_OscConfig+0x61c>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d11a      	bne.n	8001a88 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a52:	4ba1      	ldr	r3, [pc, #644]	; (8001cd8 <HAL_RCC_OscConfig+0x61c>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4ba0      	ldr	r3, [pc, #640]	; (8001cd8 <HAL_RCC_OscConfig+0x61c>)
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	0049      	lsls	r1, r1, #1
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fb10 	bl	8001084 <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6a:	f7ff fb0b 	bl	8001084 <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e127      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7c:	4b96      	ldr	r3, [pc, #600]	; (8001cd8 <HAL_RCC_OscConfig+0x61c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4013      	ands	r3, r2
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3e2>
 8001a90:	4b90      	ldr	r3, [pc, #576]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a94:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a9c:	e01c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x404>
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aaa:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001aac:	2104      	movs	r1, #4
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	430a      	orrs	r2, r1
 8001abc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
 8001ac0:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ac2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ac4:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	438a      	bics	r2, r1
 8001aca:	65da      	str	r2, [r3, #92]	; 0x5c
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ace:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d014      	beq.n	8001b0a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fad0 	bl	8001084 <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae8:	e009      	b.n	8001afe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff facb 	bl	8001084 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4a79      	ldr	r2, [pc, #484]	; (8001cdc <HAL_RCC_OscConfig+0x620>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0e6      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afe:	4b75      	ldr	r3, [pc, #468]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x42e>
 8001b08:	e013      	b.n	8001b32 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fabb 	bl	8001084 <HAL_GetTick>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b12:	e009      	b.n	8001b28 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b14:	f7ff fab6 	bl	8001084 <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	4a6f      	ldr	r2, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x620>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0d1      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b28:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b32:	231f      	movs	r3, #31
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b40:	4b64      	ldr	r3, [pc, #400]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b42:	4967      	ldr	r1, [pc, #412]	; (8001ce0 <HAL_RCC_OscConfig+0x624>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d100      	bne.n	8001b52 <HAL_RCC_OscConfig+0x496>
 8001b50:	e0bb      	b.n	8001cca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b52:	4b60      	ldr	r3, [pc, #384]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2238      	movs	r2, #56	; 0x38
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d100      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4a4>
 8001b5e:	e07b      	b.n	8001c58 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d156      	bne.n	8001c16 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b68:	4b5a      	ldr	r3, [pc, #360]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b6e:	495d      	ldr	r1, [pc, #372]	; (8001ce4 <HAL_RCC_OscConfig+0x628>)
 8001b70:	400a      	ands	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff fa86 	bl	8001084 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff fa81 	bl	8001084 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e09d      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	049b      	lsls	r3, r3, #18
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_RCC_OscConfig+0x62c>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1a      	ldr	r2, [r3, #32]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	4b42      	ldr	r3, [pc, #264]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	0449      	lsls	r1, r1, #17
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	4b3c      	ldr	r3, [pc, #240]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0549      	lsls	r1, r1, #21
 8001be8:	430a      	orrs	r2, r1
 8001bea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff fa4a 	bl	8001084 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff fa45 	bl	8001084 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e061      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	049b      	lsls	r3, r3, #18
 8001c10:	4013      	ands	r3, r2
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
 8001c14:	e059      	b.n	8001cca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c1c:	4931      	ldr	r1, [pc, #196]	; (8001ce4 <HAL_RCC_OscConfig+0x628>)
 8001c1e:	400a      	ands	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7ff fa2f 	bl	8001084 <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7ff fa2a 	bl	8001084 <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e046      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	049b      	lsls	r3, r3, #18
 8001c46:	4013      	ands	r3, r2
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c50:	4926      	ldr	r1, [pc, #152]	; (8001cec <HAL_RCC_OscConfig+0x630>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	e038      	b.n	8001cca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e033      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d126      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2270      	movs	r2, #112	; 0x70
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d11f      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	23fe      	movs	r3, #254	; 0xfe
 8001c8a:	01db      	lsls	r3, r3, #7
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d116      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	23f8      	movs	r3, #248	; 0xf8
 8001c9c:	039b      	lsls	r3, r3, #14
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d10e      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	23e0      	movs	r3, #224	; 0xe0
 8001cac:	051b      	lsls	r3, r3, #20
 8001cae:	401a      	ands	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	0f5b      	lsrs	r3, r3, #29
 8001cbc:	075a      	lsls	r2, r3, #29
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b008      	add	sp, #32
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	00001388 	.word	0x00001388
 8001ce0:	efffffff 	.word	0xefffffff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	11c1808c 	.word	0x11c1808c
 8001cec:	eefefffc 	.word	0xeefefffc

08001cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0e9      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b76      	ldr	r3, [pc, #472]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2207      	movs	r2, #7
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d91e      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b73      	ldr	r3, [pc, #460]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2207      	movs	r2, #7
 8001d18:	4393      	bics	r3, r2
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	4b70      	ldr	r3, [pc, #448]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d24:	f7ff f9ae 	bl	8001084 <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d2c:	e009      	b.n	8001d42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2e:	f7ff f9a9 	bl	8001084 <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4a6a      	ldr	r2, [pc, #424]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0ca      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d42:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2207      	movs	r2, #7
 8001d48:	4013      	ands	r3, r2
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2202      	movs	r2, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	d015      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	4013      	ands	r3, r2
 8001d62:	d006      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d64:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6a:	21e0      	movs	r1, #224	; 0xe0
 8001d6c:	01c9      	lsls	r1, r1, #7
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	4a5d      	ldr	r2, [pc, #372]	; (8001eec <HAL_RCC_ClockConfig+0x1fc>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d82:	430a      	orrs	r2, r1
 8001d84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d057      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d98:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	029b      	lsls	r3, r3, #10
 8001da0:	4013      	ands	r3, r2
 8001da2:	d12b      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e097      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db0:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	049b      	lsls	r3, r3, #18
 8001db8:	4013      	ands	r3, r2
 8001dba:	d11f      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e08b      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d113      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e07f      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001de0:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de4:	2202      	movs	r2, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d108      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e074      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	2202      	movs	r2, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e06d      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2207      	movs	r2, #7
 8001e02:	4393      	bics	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e10:	f7ff f938 	bl	8001084 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1a:	f7ff f933 	bl	8001084 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a2f      	ldr	r2, [pc, #188]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e054      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2238      	movs	r2, #56	; 0x38
 8001e34:	401a      	ands	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1ec      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2207      	movs	r2, #7
 8001e46:	4013      	ands	r3, r2
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d21e      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2207      	movs	r2, #7
 8001e54:	4393      	bics	r3, r2
 8001e56:	0019      	movs	r1, r3
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e60:	f7ff f910 	bl	8001084 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e68:	e009      	b.n	8001e7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6a:	f7ff f90b 	bl	8001084 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e02c      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2207      	movs	r2, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1ee      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2204      	movs	r2, #4
 8001e92:	4013      	ands	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <HAL_RCC_ClockConfig+0x200>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001eaa:	f000 f829 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001eae:	0001      	movs	r1, r0
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	401a      	ands	r2, r3
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_RCC_ClockConfig+0x204>)
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	58d3      	ldr	r3, [r2, r3]
 8001ec0:	221f      	movs	r2, #31
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	000a      	movs	r2, r1
 8001ec6:	40da      	lsrs	r2, r3
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_ClockConfig+0x208>)
 8001eca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_ClockConfig+0x20c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff f87b 	bl	8000fcc <HAL_InitTick>
 8001ed6:	0003      	movs	r3, r0
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b004      	add	sp, #16
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	00001388 	.word	0x00001388
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	fffff0ff 	.word	0xfffff0ff
 8001ef0:	ffff8fff 	.word	0xffff8fff
 8001ef4:	080051b8 	.word	0x080051b8
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	20000008 	.word	0x20000008

08001f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2238      	movs	r2, #56	; 0x38
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d10f      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0adb      	lsrs	r3, r3, #11
 8001f16:	2207      	movs	r2, #7
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	0013      	movs	r3, r2
 8001f20:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	4835      	ldr	r0, [pc, #212]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f26:	f7fe f8ff 	bl	8000128 <__udivsi3>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	e05d      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f30:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2238      	movs	r2, #56	; 0x38
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	e054      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2238      	movs	r2, #56	; 0x38
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d138      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2203      	movs	r2, #3
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	2207      	movs	r2, #7
 8001f60:	4013      	ands	r3, r2
 8001f62:	3301      	adds	r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d10d      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	4824      	ldr	r0, [pc, #144]	; (8002000 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f70:	f7fe f8da 	bl	8000128 <__udivsi3>
 8001f74:	0003      	movs	r3, r0
 8001f76:	0019      	movs	r1, r3
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	227f      	movs	r2, #127	; 0x7f
 8001f80:	4013      	ands	r3, r2
 8001f82:	434b      	muls	r3, r1
 8001f84:	617b      	str	r3, [r7, #20]
        break;
 8001f86:	e00d      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	481c      	ldr	r0, [pc, #112]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f8c:	f7fe f8cc 	bl	8000128 <__udivsi3>
 8001f90:	0003      	movs	r3, r0
 8001f92:	0019      	movs	r1, r3
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	227f      	movs	r2, #127	; 0x7f
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	434b      	muls	r3, r1
 8001fa0:	617b      	str	r3, [r7, #20]
        break;
 8001fa2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0f5b      	lsrs	r3, r3, #29
 8001faa:	2207      	movs	r2, #7
 8001fac:	4013      	ands	r3, r2
 8001fae:	3301      	adds	r3, #1
 8001fb0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	6978      	ldr	r0, [r7, #20]
 8001fb6:	f7fe f8b7 	bl	8000128 <__udivsi3>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e015      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2238      	movs	r2, #56	; 0x38
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d103      	bne.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2238      	movs	r2, #56	; 0x38
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b18      	cmp	r3, #24
 8001fde:	d103      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fe0:	23fa      	movs	r3, #250	; 0xfa
 8001fe2:	01db      	lsls	r3, r3, #7
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	e001      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fec:	693b      	ldr	r3, [r7, #16]
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b006      	add	sp, #24
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	00f42400 	.word	0x00f42400
 8002000:	007a1200 	.word	0x007a1200

08002004 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <HAL_RCC_GetHCLKFreq+0x10>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800201c:	f7ff fff2 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002020:	0004      	movs	r4, r0
 8002022:	f7ff fb3f 	bl	80016a4 <LL_RCC_GetAPB1Prescaler>
 8002026:	0003      	movs	r3, r0
 8002028:	0b1a      	lsrs	r2, r3, #12
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetPCLK1Freq+0x28>)
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	58d3      	ldr	r3, [r2, r3]
 8002030:	221f      	movs	r2, #31
 8002032:	4013      	ands	r3, r2
 8002034:	40dc      	lsrs	r4, r3
 8002036:	0023      	movs	r3, r4
}
 8002038:	0018      	movs	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	bdb0      	pop	{r4, r5, r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	080051f8 	.word	0x080051f8

08002044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800204c:	2313      	movs	r3, #19
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002054:	2312      	movs	r3, #18
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	029b      	lsls	r3, r3, #10
 8002064:	4013      	ands	r3, r2
 8002066:	d100      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002068:	e0a3      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206a:	2011      	movs	r0, #17
 800206c:	183b      	adds	r3, r7, r0
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002072:	4bc3      	ldr	r3, [pc, #780]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	055b      	lsls	r3, r3, #21
 800207a:	4013      	ands	r3, r2
 800207c:	d110      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4bc0      	ldr	r3, [pc, #768]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002082:	4bbf      	ldr	r3, [pc, #764]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	0549      	lsls	r1, r1, #21
 8002088:	430a      	orrs	r2, r1
 800208a:	63da      	str	r2, [r3, #60]	; 0x3c
 800208c:	4bbc      	ldr	r3, [pc, #752]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800208e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	055b      	lsls	r3, r3, #21
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209a:	183b      	adds	r3, r7, r0
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a0:	4bb8      	ldr	r3, [pc, #736]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4bb7      	ldr	r3, [pc, #732]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	0049      	lsls	r1, r1, #1
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ae:	f7fe ffe9 	bl	8001084 <HAL_GetTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b6:	e00b      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b8:	f7fe ffe4 	bl	8001084 <HAL_GetTick>
 80020bc:	0002      	movs	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d904      	bls.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80020c6:	2313      	movs	r3, #19
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2203      	movs	r2, #3
 80020cc:	701a      	strb	r2, [r3, #0]
        break;
 80020ce:	e005      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020d0:	4bac      	ldr	r3, [pc, #688]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d0ed      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80020dc:	2313      	movs	r3, #19
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d154      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020e6:	4ba6      	ldr	r3, [pc, #664]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020ea:	23c0      	movs	r3, #192	; 0xc0
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4013      	ands	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d019      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d014      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002102:	4b9f      	ldr	r3, [pc, #636]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	4aa0      	ldr	r2, [pc, #640]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002108:	4013      	ands	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800210c:	4b9c      	ldr	r3, [pc, #624]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800210e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002110:	4b9b      	ldr	r3, [pc, #620]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0249      	lsls	r1, r1, #9
 8002116:	430a      	orrs	r2, r1
 8002118:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800211a:	4b99      	ldr	r3, [pc, #612]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800211c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800211e:	4b98      	ldr	r3, [pc, #608]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002120:	499a      	ldr	r1, [pc, #616]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002122:	400a      	ands	r2, r1
 8002124:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002126:	4b96      	ldr	r3, [pc, #600]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2201      	movs	r2, #1
 8002130:	4013      	ands	r3, r2
 8002132:	d016      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7fe ffa6 	bl	8001084 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213c:	e00c      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7fe ffa1 	bl	8001084 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	4a91      	ldr	r2, [pc, #580]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d904      	bls.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800214e:	2313      	movs	r3, #19
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	2203      	movs	r2, #3
 8002154:	701a      	strb	r2, [r3, #0]
            break;
 8002156:	e004      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002158:	4b89      	ldr	r3, [pc, #548]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	2202      	movs	r2, #2
 800215e:	4013      	ands	r3, r2
 8002160:	d0ed      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002162:	2313      	movs	r3, #19
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800216c:	4b84      	ldr	r3, [pc, #528]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	4a85      	ldr	r2, [pc, #532]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002172:	4013      	ands	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800217a:	4b81      	ldr	r3, [pc, #516]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800217c:	430a      	orrs	r2, r1
 800217e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002180:	e00c      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002182:	2312      	movs	r3, #18
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2213      	movs	r2, #19
 8002188:	18ba      	adds	r2, r7, r2
 800218a:	7812      	ldrb	r2, [r2, #0]
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e005      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002190:	2312      	movs	r3, #18
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2213      	movs	r2, #19
 8002196:	18ba      	adds	r2, r7, r2
 8002198:	7812      	ldrb	r2, [r2, #0]
 800219a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800219c:	2311      	movs	r3, #17
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a6:	4b76      	ldr	r3, [pc, #472]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021aa:	4b75      	ldr	r3, [pc, #468]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ac:	4979      	ldr	r1, [pc, #484]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80021ae:	400a      	ands	r2, r1
 80021b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d009      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021bc:	4b70      	ldr	r3, [pc, #448]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	2203      	movs	r2, #3
 80021c2:	4393      	bics	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021cc:	430a      	orrs	r2, r1
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2202      	movs	r2, #2
 80021d6:	4013      	ands	r3, r2
 80021d8:	d009      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021da:	4b69      	ldr	r3, [pc, #420]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	220c      	movs	r2, #12
 80021e0:	4393      	bics	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	4b65      	ldr	r3, [pc, #404]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ea:	430a      	orrs	r2, r1
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2210      	movs	r2, #16
 80021f4:	4013      	ands	r3, r2
 80021f6:	d009      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021f8:	4b61      	ldr	r3, [pc, #388]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	4a66      	ldr	r2, [pc, #408]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	4b5e      	ldr	r3, [pc, #376]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002208:	430a      	orrs	r2, r1
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4013      	ands	r3, r2
 8002216:	d009      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002218:	4b59      	ldr	r3, [pc, #356]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221c:	4a5f      	ldr	r2, [pc, #380]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	4b56      	ldr	r3, [pc, #344]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002228:	430a      	orrs	r2, r1
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4013      	ands	r3, r2
 8002236:	d009      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002238:	4b51      	ldr	r3, [pc, #324]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	4a58      	ldr	r2, [pc, #352]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800223e:	4013      	ands	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002248:	430a      	orrs	r2, r1
 800224a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2220      	movs	r2, #32
 8002252:	4013      	ands	r3, r2
 8002254:	d009      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002256:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	4a52      	ldr	r2, [pc, #328]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800225c:	4013      	ands	r3, r2
 800225e:	0019      	movs	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	4b46      	ldr	r3, [pc, #280]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002266:	430a      	orrs	r2, r1
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	01db      	lsls	r3, r3, #7
 8002272:	4013      	ands	r3, r2
 8002274:	d015      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002276:	4b42      	ldr	r3, [pc, #264]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	0899      	lsrs	r1, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1a      	ldr	r2, [r3, #32]
 8002282:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002284:	430a      	orrs	r2, r1
 8002286:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1a      	ldr	r2, [r3, #32]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	05db      	lsls	r3, r3, #23
 8002290:	429a      	cmp	r2, r3
 8002292:	d106      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002294:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	0249      	lsls	r1, r1, #9
 800229e:	430a      	orrs	r2, r1
 80022a0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	031b      	lsls	r3, r3, #12
 80022aa:	4013      	ands	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022ae:	4b34      	ldr	r3, [pc, #208]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b2:	2240      	movs	r2, #64	; 0x40
 80022b4:	4393      	bics	r3, r2
 80022b6:	0019      	movs	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022bc:	4b30      	ldr	r3, [pc, #192]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	039b      	lsls	r3, r3, #14
 80022ca:	4013      	ands	r3, r2
 80022cc:	d016      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022ce:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d2:	4a35      	ldr	r2, [pc, #212]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022de:	430a      	orrs	r2, r1
 80022e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	03db      	lsls	r3, r3, #15
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d106      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	4b23      	ldr	r3, [pc, #140]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f4:	2180      	movs	r1, #128	; 0x80
 80022f6:	0449      	lsls	r1, r1, #17
 80022f8:	430a      	orrs	r2, r1
 80022fa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	03db      	lsls	r3, r3, #15
 8002304:	4013      	ands	r3, r2
 8002306:	d016      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	4a27      	ldr	r2, [pc, #156]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002318:	430a      	orrs	r2, r1
 800231a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	045b      	lsls	r3, r3, #17
 8002324:	429a      	cmp	r2, r3
 8002326:	d106      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0449      	lsls	r1, r1, #17
 8002332:	430a      	orrs	r2, r1
 8002334:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	4013      	ands	r3, r2
 8002340:	d016      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002348:	4013      	ands	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002352:	430a      	orrs	r2, r1
 8002354:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	01db      	lsls	r3, r3, #7
 800235e:	429a      	cmp	r2, r3
 8002360:	d106      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	0249      	lsls	r1, r1, #9
 800236c:	430a      	orrs	r2, r1
 800236e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002370:	2312      	movs	r3, #18
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	781b      	ldrb	r3, [r3, #0]
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b006      	add	sp, #24
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	40021000 	.word	0x40021000
 8002384:	40007000 	.word	0x40007000
 8002388:	fffffcff 	.word	0xfffffcff
 800238c:	fffeffff 	.word	0xfffeffff
 8002390:	00001388 	.word	0x00001388
 8002394:	efffffff 	.word	0xefffffff
 8002398:	fffff3ff 	.word	0xfffff3ff
 800239c:	fff3ffff 	.word	0xfff3ffff
 80023a0:	ffcfffff 	.word	0xffcfffff
 80023a4:	ffffcfff 	.word	0xffffcfff
 80023a8:	ffbfffff 	.word	0xffbfffff
 80023ac:	feffffff 	.word	0xfeffffff
 80023b0:	ffff3fff 	.word	0xffff3fff

080023b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80023b4:	b5b0      	push	{r4, r5, r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023bc:	230f      	movs	r3, #15
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d100      	bne.n	80023cc <HAL_RTC_Init+0x18>
 80023ca:	e08c      	b.n	80024e6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2229      	movs	r2, #41	; 0x29
 80023d0:	5c9b      	ldrb	r3, [r3, r2]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2228      	movs	r2, #40	; 0x28
 80023dc:	2100      	movs	r1, #0
 80023de:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2288      	movs	r2, #136	; 0x88
 80023e4:	0212      	lsls	r2, r2, #8
 80023e6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0018      	movs	r0, r3
 80023ec:	f7fe fc58 	bl	8000ca0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2229      	movs	r2, #41	; 0x29
 80023f4:	2102      	movs	r1, #2
 80023f6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2210      	movs	r2, #16
 8002400:	4013      	ands	r3, r2
 8002402:	2b10      	cmp	r3, #16
 8002404:	d062      	beq.n	80024cc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	22ca      	movs	r2, #202	; 0xca
 800240c:	625a      	str	r2, [r3, #36]	; 0x24
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2253      	movs	r2, #83	; 0x53
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002416:	250f      	movs	r5, #15
 8002418:	197c      	adds	r4, r7, r5
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 f892 	bl	8002546 <RTC_EnterInitMode>
 8002422:	0003      	movs	r3, r0
 8002424:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002426:	0028      	movs	r0, r5
 8002428:	183b      	adds	r3, r7, r0
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d12c      	bne.n	800248a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	492e      	ldr	r1, [pc, #184]	; (80024f4 <HAL_RTC_Init+0x140>)
 800243c:	400a      	ands	r2, r1
 800243e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6999      	ldr	r1, [r3, #24]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6912      	ldr	r2, [r2, #16]
 8002466:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6919      	ldr	r1, [r3, #16]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	041a      	lsls	r2, r3, #16
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800247c:	183c      	adds	r4, r7, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 f8a3 	bl	80025cc <RTC_ExitInitMode>
 8002486:	0003      	movs	r3, r0
 8002488:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800248a:	230f      	movs	r3, #15
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d116      	bne.n	80024c2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	00d2      	lsls	r2, r2, #3
 80024a0:	08d2      	lsrs	r2, r2, #3
 80024a2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6999      	ldr	r1, [r3, #24]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	22ff      	movs	r2, #255	; 0xff
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24
 80024ca:	e003      	b.n	80024d4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80024cc:	230f      	movs	r3, #15
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80024d4:	230f      	movs	r3, #15
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d103      	bne.n	80024e6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2229      	movs	r2, #41	; 0x29
 80024e2:	2101      	movs	r1, #1
 80024e4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80024e6:	230f      	movs	r3, #15
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	781b      	ldrb	r3, [r3, #0]
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bdb0      	pop	{r4, r5, r7, pc}
 80024f4:	fb8fffbf 	.word	0xfb8fffbf

080024f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	21a0      	movs	r1, #160	; 0xa0
 800250c:	438a      	bics	r2, r1
 800250e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002510:	f7fe fdb8 	bl	8001084 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002518:	e00a      	b.n	8002530 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800251a:	f7fe fdb3 	bl	8001084 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1ad2      	subs	r2, r2, r3
 8002524:	23fa      	movs	r3, #250	; 0xfa
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d901      	bls.n	8002530 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e006      	b.n	800253e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	4013      	ands	r3, r2
 800253a:	d0ee      	beq.n	800251a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}

08002546 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800254e:	230f      	movs	r3, #15
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2240      	movs	r2, #64	; 0x40
 800255e:	4013      	ands	r3, r2
 8002560:	d12c      	bne.n	80025bc <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2180      	movs	r1, #128	; 0x80
 800256e:	430a      	orrs	r2, r1
 8002570:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002572:	f7fe fd87 	bl	8001084 <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800257a:	e014      	b.n	80025a6 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800257c:	f7fe fd82 	bl	8001084 <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad2      	subs	r2, r2, r3
 8002586:	200f      	movs	r0, #15
 8002588:	183b      	adds	r3, r7, r0
 800258a:	1839      	adds	r1, r7, r0
 800258c:	7809      	ldrb	r1, [r1, #0]
 800258e:	7019      	strb	r1, [r3, #0]
 8002590:	23fa      	movs	r3, #250	; 0xfa
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d906      	bls.n	80025a6 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002598:	183b      	adds	r3, r7, r0
 800259a:	2203      	movs	r2, #3
 800259c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2229      	movs	r2, #41	; 0x29
 80025a2:	2103      	movs	r1, #3
 80025a4:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2240      	movs	r2, #64	; 0x40
 80025ae:	4013      	ands	r3, r2
 80025b0:	d104      	bne.n	80025bc <RTC_EnterInitMode+0x76>
 80025b2:	230f      	movs	r3, #15
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d1df      	bne.n	800257c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80025bc:	230f      	movs	r3, #15
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	781b      	ldrb	r3, [r3, #0]
}
 80025c2:	0018      	movs	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b004      	add	sp, #16
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d4:	240f      	movs	r4, #15
 80025d6:	193b      	adds	r3, r7, r4
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80025dc:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <RTC_ExitInitMode+0x84>)
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <RTC_ExitInitMode+0x84>)
 80025e2:	2180      	movs	r1, #128	; 0x80
 80025e4:	438a      	bics	r2, r1
 80025e6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <RTC_ExitInitMode+0x84>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2220      	movs	r2, #32
 80025ee:	4013      	ands	r3, r2
 80025f0:	d10d      	bne.n	800260e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7ff ff7f 	bl	80024f8 <HAL_RTC_WaitForSynchro>
 80025fa:	1e03      	subs	r3, r0, #0
 80025fc:	d021      	beq.n	8002642 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2229      	movs	r2, #41	; 0x29
 8002602:	2103      	movs	r1, #3
 8002604:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002606:	193b      	adds	r3, r7, r4
 8002608:	2203      	movs	r2, #3
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e019      	b.n	8002642 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <RTC_ExitInitMode+0x84>)
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <RTC_ExitInitMode+0x84>)
 8002614:	2120      	movs	r1, #32
 8002616:	438a      	bics	r2, r1
 8002618:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0018      	movs	r0, r3
 800261e:	f7ff ff6b 	bl	80024f8 <HAL_RTC_WaitForSynchro>
 8002622:	1e03      	subs	r3, r0, #0
 8002624:	d007      	beq.n	8002636 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2229      	movs	r2, #41	; 0x29
 800262a:	2103      	movs	r1, #3
 800262c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800262e:	230f      	movs	r3, #15
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	2203      	movs	r2, #3
 8002634:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <RTC_ExitInitMode+0x84>)
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <RTC_ExitInitMode+0x84>)
 800263c:	2120      	movs	r1, #32
 800263e:	430a      	orrs	r2, r1
 8002640:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002642:	230f      	movs	r3, #15
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	781b      	ldrb	r3, [r3, #0]
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b005      	add	sp, #20
 800264e:	bd90      	pop	{r4, r7, pc}
 8002650:	40002800 	.word	0x40002800

08002654 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0a8      	b.n	80027b8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	2382      	movs	r3, #130	; 0x82
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	429a      	cmp	r2, r3
 8002678:	d009      	beq.n	800268e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	61da      	str	r2, [r3, #28]
 8002680:	e005      	b.n	800268e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	225d      	movs	r2, #93	; 0x5d
 8002698:	5c9b      	ldrb	r3, [r3, r2]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	225c      	movs	r2, #92	; 0x5c
 80026a4:	2100      	movs	r1, #0
 80026a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	0018      	movs	r0, r3
 80026ac:	f7fe fb36 	bl	8000d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	225d      	movs	r2, #93	; 0x5d
 80026b4:	2102      	movs	r1, #2
 80026b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2140      	movs	r1, #64	; 0x40
 80026c4:	438a      	bics	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	23e0      	movs	r3, #224	; 0xe0
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d902      	bls.n	80026da <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	e002      	b.n	80026e0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	015b      	lsls	r3, r3, #5
 80026de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	23f0      	movs	r3, #240	; 0xf0
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d008      	beq.n	80026fe <HAL_SPI_Init+0xaa>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	23e0      	movs	r3, #224	; 0xe0
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d002      	beq.n	80026fe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	2382      	movs	r3, #130	; 0x82
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	401a      	ands	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6899      	ldr	r1, [r3, #8]
 800270c:	2384      	movs	r3, #132	; 0x84
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	400b      	ands	r3, r1
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	2102      	movs	r1, #2
 800271a:	400b      	ands	r3, r1
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	2101      	movs	r1, #1
 8002724:	400b      	ands	r3, r1
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6999      	ldr	r1, [r3, #24]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	400b      	ands	r3, r1
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2138      	movs	r1, #56	; 0x38
 800273a:	400b      	ands	r3, r1
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	2180      	movs	r1, #128	; 0x80
 8002744:	400b      	ands	r3, r1
 8002746:	431a      	orrs	r2, r3
 8002748:	0011      	movs	r1, r2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	401a      	ands	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	2204      	movs	r2, #4
 8002764:	401a      	ands	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	2110      	movs	r1, #16
 800276c:	400b      	ands	r3, r1
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002774:	2108      	movs	r1, #8
 8002776:	400b      	ands	r3, r1
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68d9      	ldr	r1, [r3, #12]
 800277e:	23f0      	movs	r3, #240	; 0xf0
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	400b      	ands	r3, r1
 8002784:	431a      	orrs	r2, r3
 8002786:	0011      	movs	r1, r2
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	015b      	lsls	r3, r3, #5
 800278e:	401a      	ands	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4907      	ldr	r1, [pc, #28]	; (80027c0 <HAL_SPI_Init+0x16c>)
 80027a4:	400a      	ands	r2, r1
 80027a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	225d      	movs	r2, #93	; 0x5d
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b004      	add	sp, #16
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	fffff7ff 	.word	0xfffff7ff

080027c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	1dbb      	adds	r3, r7, #6
 80027d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027d4:	231f      	movs	r3, #31
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	225c      	movs	r2, #92	; 0x5c
 80027e0:	5c9b      	ldrb	r3, [r3, r2]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_SPI_Transmit+0x26>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e140      	b.n	8002a6c <HAL_SPI_Transmit+0x2a8>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	225c      	movs	r2, #92	; 0x5c
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027f2:	f7fe fc47 	bl	8001084 <HAL_GetTick>
 80027f6:	0003      	movs	r3, r0
 80027f8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027fa:	2316      	movs	r3, #22
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	1dba      	adds	r2, r7, #6
 8002800:	8812      	ldrh	r2, [r2, #0]
 8002802:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	225d      	movs	r2, #93	; 0x5d
 8002808:	5c9b      	ldrb	r3, [r3, r2]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d004      	beq.n	800281a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002810:	231f      	movs	r3, #31
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	2202      	movs	r2, #2
 8002816:	701a      	strb	r2, [r3, #0]
    goto error;
 8002818:	e11d      	b.n	8002a56 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_SPI_Transmit+0x64>
 8002820:	1dbb      	adds	r3, r7, #6
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d104      	bne.n	8002832 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002828:	231f      	movs	r3, #31
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002830:	e111      	b.n	8002a56 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	225d      	movs	r2, #93	; 0x5d
 8002836:	2103      	movs	r1, #3
 8002838:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1dba      	adds	r2, r7, #6
 800284a:	8812      	ldrh	r2, [r2, #0]
 800284c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1dba      	adds	r2, r7, #6
 8002852:	8812      	ldrh	r2, [r2, #0]
 8002854:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2244      	movs	r2, #68	; 0x44
 8002860:	2100      	movs	r1, #0
 8002862:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2246      	movs	r2, #70	; 0x46
 8002868:	2100      	movs	r1, #0
 800286a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	429a      	cmp	r2, r3
 8002882:	d110      	bne.n	80028a6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2140      	movs	r1, #64	; 0x40
 8002890:	438a      	bics	r2, r1
 8002892:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	01c9      	lsls	r1, r1, #7
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2240      	movs	r2, #64	; 0x40
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d007      	beq.n	80028c4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2140      	movs	r1, #64	; 0x40
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	23e0      	movs	r3, #224	; 0xe0
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d94e      	bls.n	800296e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <HAL_SPI_Transmit+0x11e>
 80028d8:	2316      	movs	r3, #22
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d13f      	bne.n	8002962 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	881a      	ldrh	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	1c9a      	adds	r2, r3, #2
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002906:	e02c      	b.n	8002962 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2202      	movs	r2, #2
 8002910:	4013      	ands	r3, r2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d112      	bne.n	800293c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	881a      	ldrh	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	1c9a      	adds	r2, r3, #2
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	87da      	strh	r2, [r3, #62]	; 0x3e
 800293a:	e012      	b.n	8002962 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800293c:	f7fe fba2 	bl	8001084 <HAL_GetTick>
 8002940:	0002      	movs	r2, r0
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d802      	bhi.n	8002952 <HAL_SPI_Transmit+0x18e>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	d102      	bne.n	8002958 <HAL_SPI_Transmit+0x194>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002958:	231f      	movs	r3, #31
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	2203      	movs	r2, #3
 800295e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002960:	e079      	b.n	8002a56 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1cd      	bne.n	8002908 <HAL_SPI_Transmit+0x144>
 800296c:	e04f      	b.n	8002a0e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <HAL_SPI_Transmit+0x1bc>
 8002976:	2316      	movs	r3, #22
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d141      	bne.n	8002a04 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	330c      	adds	r3, #12
 800298a:	7812      	ldrb	r2, [r2, #0]
 800298c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80029a6:	e02d      	b.n	8002a04 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d113      	bne.n	80029de <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	7812      	ldrb	r2, [r2, #0]
 80029c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029dc:	e012      	b.n	8002a04 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029de:	f7fe fb51 	bl	8001084 <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d802      	bhi.n	80029f4 <HAL_SPI_Transmit+0x230>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	d102      	bne.n	80029fa <HAL_SPI_Transmit+0x236>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d104      	bne.n	8002a04 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80029fa:	231f      	movs	r3, #31
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2203      	movs	r2, #3
 8002a00:	701a      	strb	r2, [r3, #0]
          goto error;
 8002a02:	e028      	b.n	8002a56 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1cc      	bne.n	80029a8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	6839      	ldr	r1, [r7, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 fcd9 	bl	80033cc <SPI_EndRxTxTransaction>
 8002a1a:	1e03      	subs	r3, r0, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002a4a:	231f      	movs	r3, #31
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
 8002a52:	e000      	b.n	8002a56 <HAL_SPI_Transmit+0x292>
  }

error:
 8002a54:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	225d      	movs	r2, #93	; 0x5d
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	225c      	movs	r2, #92	; 0x5c
 8002a62:	2100      	movs	r1, #0
 8002a64:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a66:	231f      	movs	r3, #31
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	781b      	ldrb	r3, [r3, #0]
}
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b008      	add	sp, #32
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	1dbb      	adds	r3, r7, #6
 8002a82:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a84:	2317      	movs	r3, #23
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	2382      	movs	r3, #130	; 0x82
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d113      	bne.n	8002ac0 <HAL_SPI_Receive+0x4c>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	225d      	movs	r2, #93	; 0x5d
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002aa8:	1dbb      	adds	r3, r7, #6
 8002aaa:	881c      	ldrh	r4, [r3, #0]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	0023      	movs	r3, r4
 8002ab8:	f000 f928 	bl	8002d0c <HAL_SPI_TransmitReceive>
 8002abc:	0003      	movs	r3, r0
 8002abe:	e11c      	b.n	8002cfa <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	225c      	movs	r2, #92	; 0x5c
 8002ac4:	5c9b      	ldrb	r3, [r3, r2]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_SPI_Receive+0x5a>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e115      	b.n	8002cfa <HAL_SPI_Receive+0x286>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	225c      	movs	r2, #92	; 0x5c
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ad6:	f7fe fad5 	bl	8001084 <HAL_GetTick>
 8002ada:	0003      	movs	r3, r0
 8002adc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	225d      	movs	r2, #93	; 0x5d
 8002ae2:	5c9b      	ldrb	r3, [r3, r2]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d004      	beq.n	8002af4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002aea:	2317      	movs	r3, #23
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	2202      	movs	r2, #2
 8002af0:	701a      	strb	r2, [r3, #0]
    goto error;
 8002af2:	e0f7      	b.n	8002ce4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_SPI_Receive+0x8e>
 8002afa:	1dbb      	adds	r3, r7, #6
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d104      	bne.n	8002b0c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002b02:	2317      	movs	r3, #23
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b0a:	e0eb      	b.n	8002ce4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	225d      	movs	r2, #93	; 0x5d
 8002b10:	2104      	movs	r1, #4
 8002b12:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1dba      	adds	r2, r7, #6
 8002b24:	2144      	movs	r1, #68	; 0x44
 8002b26:	8812      	ldrh	r2, [r2, #0]
 8002b28:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1dba      	adds	r2, r7, #6
 8002b2e:	2146      	movs	r1, #70	; 0x46
 8002b30:	8812      	ldrh	r2, [r2, #0]
 8002b32:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	23e0      	movs	r3, #224	; 0xe0
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d908      	bls.n	8002b70 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4966      	ldr	r1, [pc, #408]	; (8002d04 <HAL_SPI_Receive+0x290>)
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	e008      	b.n	8002b82 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	0149      	lsls	r1, r1, #5
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d10f      	bne.n	8002bae <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2140      	movs	r1, #64	; 0x40
 8002b9a:	438a      	bics	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4957      	ldr	r1, [pc, #348]	; (8002d08 <HAL_SPI_Receive+0x294>)
 8002baa:	400a      	ands	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d007      	beq.n	8002bcc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2140      	movs	r1, #64	; 0x40
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	23e0      	movs	r3, #224	; 0xe0
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d900      	bls.n	8002bda <HAL_SPI_Receive+0x166>
 8002bd8:	e069      	b.n	8002cae <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bda:	e031      	b.n	8002c40 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2201      	movs	r2, #1
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d117      	bne.n	8002c1a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	330c      	adds	r3, #12
 8002bf0:	001a      	movs	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2246      	movs	r2, #70	; 0x46
 8002c0a:	5a9b      	ldrh	r3, [r3, r2]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b299      	uxth	r1, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2246      	movs	r2, #70	; 0x46
 8002c16:	5299      	strh	r1, [r3, r2]
 8002c18:	e012      	b.n	8002c40 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c1a:	f7fe fa33 	bl	8001084 <HAL_GetTick>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d802      	bhi.n	8002c30 <HAL_SPI_Receive+0x1bc>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	d102      	bne.n	8002c36 <HAL_SPI_Receive+0x1c2>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002c36:	2317      	movs	r3, #23
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	701a      	strb	r2, [r3, #0]
          goto error;
 8002c3e:	e051      	b.n	8002ce4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2246      	movs	r2, #70	; 0x46
 8002c44:	5a9b      	ldrh	r3, [r3, r2]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1c7      	bne.n	8002bdc <HAL_SPI_Receive+0x168>
 8002c4c:	e035      	b.n	8002cba <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2201      	movs	r2, #1
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d115      	bne.n	8002c88 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	b292      	uxth	r2, r2
 8002c68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	1c9a      	adds	r2, r3, #2
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2246      	movs	r2, #70	; 0x46
 8002c78:	5a9b      	ldrh	r3, [r3, r2]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b299      	uxth	r1, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2246      	movs	r2, #70	; 0x46
 8002c84:	5299      	strh	r1, [r3, r2]
 8002c86:	e012      	b.n	8002cae <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c88:	f7fe f9fc 	bl	8001084 <HAL_GetTick>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d802      	bhi.n	8002c9e <HAL_SPI_Receive+0x22a>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HAL_SPI_Receive+0x230>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002ca4:	2317      	movs	r3, #23
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	2203      	movs	r2, #3
 8002caa:	701a      	strb	r2, [r3, #0]
          goto error;
 8002cac:	e01a      	b.n	8002ce4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2246      	movs	r2, #70	; 0x46
 8002cb2:	5a9b      	ldrh	r3, [r3, r2]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1c9      	bne.n	8002c4e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	6839      	ldr	r1, [r7, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 fb25 	bl	8003310 <SPI_EndRxTransaction>
 8002cc6:	1e03      	subs	r3, r0, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d004      	beq.n	8002ce2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002cd8:	2317      	movs	r3, #23
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e000      	b.n	8002ce4 <HAL_SPI_Receive+0x270>
  }

error :
 8002ce2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	225d      	movs	r2, #93	; 0x5d
 8002ce8:	2101      	movs	r1, #1
 8002cea:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	225c      	movs	r2, #92	; 0x5c
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002cf4:	2317      	movs	r3, #23
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	781b      	ldrb	r3, [r3, #0]
}
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b007      	add	sp, #28
 8002d00:	bd90      	pop	{r4, r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	ffffefff 	.word	0xffffefff
 8002d08:	ffffbfff 	.word	0xffffbfff

08002d0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	001a      	movs	r2, r3
 8002d1a:	1cbb      	adds	r3, r7, #2
 8002d1c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d22:	2323      	movs	r3, #35	; 0x23
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	225c      	movs	r2, #92	; 0x5c
 8002d2e:	5c9b      	ldrb	r3, [r3, r2]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x2c>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e1b5      	b.n	80030a4 <HAL_SPI_TransmitReceive+0x398>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	225c      	movs	r2, #92	; 0x5c
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d40:	f7fe f9a0 	bl	8001084 <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d48:	201b      	movs	r0, #27
 8002d4a:	183b      	adds	r3, r7, r0
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	215d      	movs	r1, #93	; 0x5d
 8002d50:	5c52      	ldrb	r2, [r2, r1]
 8002d52:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d5a:	2312      	movs	r3, #18
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	1cba      	adds	r2, r7, #2
 8002d60:	8812      	ldrh	r2, [r2, #0]
 8002d62:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d64:	183b      	adds	r3, r7, r0
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d011      	beq.n	8002d90 <HAL_SPI_TransmitReceive+0x84>
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	2382      	movs	r3, #130	; 0x82
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d107      	bne.n	8002d86 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <HAL_SPI_TransmitReceive+0x7a>
 8002d7e:	183b      	adds	r3, r7, r0
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d004      	beq.n	8002d90 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002d86:	2323      	movs	r3, #35	; 0x23
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d8e:	e17e      	b.n	800308e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <HAL_SPI_TransmitReceive+0x98>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_SPI_TransmitReceive+0x98>
 8002d9c:	1cbb      	adds	r3, r7, #2
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002da4:	2323      	movs	r3, #35	; 0x23
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	2201      	movs	r2, #1
 8002daa:	701a      	strb	r2, [r3, #0]
    goto error;
 8002dac:	e16f      	b.n	800308e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	225d      	movs	r2, #93	; 0x5d
 8002db2:	5c9b      	ldrb	r3, [r3, r2]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d003      	beq.n	8002dc2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	225d      	movs	r2, #93	; 0x5d
 8002dbe:	2105      	movs	r1, #5
 8002dc0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1cba      	adds	r2, r7, #2
 8002dd2:	2146      	movs	r1, #70	; 0x46
 8002dd4:	8812      	ldrh	r2, [r2, #0]
 8002dd6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1cba      	adds	r2, r7, #2
 8002ddc:	2144      	movs	r1, #68	; 0x44
 8002dde:	8812      	ldrh	r2, [r2, #0]
 8002de0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1cba      	adds	r2, r7, #2
 8002dec:	8812      	ldrh	r2, [r2, #0]
 8002dee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1cba      	adds	r2, r7, #2
 8002df4:	8812      	ldrh	r2, [r2, #0]
 8002df6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	23e0      	movs	r3, #224	; 0xe0
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d908      	bls.n	8002e22 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	49a4      	ldr	r1, [pc, #656]	; (80030ac <HAL_SPI_TransmitReceive+0x3a0>)
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	e008      	b.n	8002e34 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	0149      	lsls	r1, r1, #5
 8002e30:	430a      	orrs	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d007      	beq.n	8002e52 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2140      	movs	r1, #64	; 0x40
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	23e0      	movs	r3, #224	; 0xe0
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d800      	bhi.n	8002e60 <HAL_SPI_TransmitReceive+0x154>
 8002e5e:	e07f      	b.n	8002f60 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_SPI_TransmitReceive+0x168>
 8002e68:	2312      	movs	r3, #18
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d000      	beq.n	8002e74 <HAL_SPI_TransmitReceive+0x168>
 8002e72:	e069      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	881a      	ldrh	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	1c9a      	adds	r2, r3, #2
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e98:	e056      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_SPI_TransmitReceive+0x1d4>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d016      	beq.n	8002ee0 <HAL_SPI_TransmitReceive+0x1d4>
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d113      	bne.n	8002ee0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	881a      	ldrh	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	1c9a      	adds	r2, r3, #2
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d11c      	bne.n	8002f28 <HAL_SPI_TransmitReceive+0x21c>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2246      	movs	r2, #70	; 0x46
 8002ef2:	5a9b      	ldrh	r3, [r3, r2]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	b292      	uxth	r2, r2
 8002f06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	1c9a      	adds	r2, r3, #2
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2246      	movs	r2, #70	; 0x46
 8002f16:	5a9b      	ldrh	r3, [r3, r2]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b299      	uxth	r1, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2246      	movs	r2, #70	; 0x46
 8002f22:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f24:	2301      	movs	r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f28:	f7fe f8ac 	bl	8001084 <HAL_GetTick>
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d807      	bhi.n	8002f48 <HAL_SPI_TransmitReceive+0x23c>
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	d004      	beq.n	8002f48 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002f3e:	2323      	movs	r3, #35	; 0x23
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	2203      	movs	r2, #3
 8002f44:	701a      	strb	r2, [r3, #0]
        goto error;
 8002f46:	e0a2      	b.n	800308e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1a3      	bne.n	8002e9a <HAL_SPI_TransmitReceive+0x18e>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2246      	movs	r2, #70	; 0x46
 8002f56:	5a9b      	ldrh	r3, [r3, r2]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d19d      	bne.n	8002e9a <HAL_SPI_TransmitReceive+0x18e>
 8002f5e:	e085      	b.n	800306c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x268>
 8002f68:	2312      	movs	r3, #18
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d000      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x268>
 8002f72:	e070      	b.n	8003056 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	330c      	adds	r3, #12
 8002f7e:	7812      	ldrb	r2, [r2, #0]
 8002f80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f9a:	e05c      	b.n	8003056 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_SPI_TransmitReceive+0x2d8>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d017      	beq.n	8002fe4 <HAL_SPI_TransmitReceive+0x2d8>
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d114      	bne.n	8002fe4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	7812      	ldrb	r2, [r2, #0]
 8002fc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2201      	movs	r2, #1
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d11e      	bne.n	8003030 <HAL_SPI_TransmitReceive+0x324>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2246      	movs	r2, #70	; 0x46
 8002ff6:	5a9b      	ldrh	r3, [r3, r2]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d018      	beq.n	8003030 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	001a      	movs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	7812      	ldrb	r2, [r2, #0]
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2246      	movs	r2, #70	; 0x46
 800301e:	5a9b      	ldrh	r3, [r3, r2]
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b299      	uxth	r1, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2246      	movs	r2, #70	; 0x46
 800302a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800302c:	2301      	movs	r3, #1
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003030:	f7fe f828 	bl	8001084 <HAL_GetTick>
 8003034:	0002      	movs	r2, r0
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800303c:	429a      	cmp	r2, r3
 800303e:	d802      	bhi.n	8003046 <HAL_SPI_TransmitReceive+0x33a>
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	3301      	adds	r3, #1
 8003044:	d102      	bne.n	800304c <HAL_SPI_TransmitReceive+0x340>
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	2b00      	cmp	r3, #0
 800304a:	d104      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800304c:	2323      	movs	r3, #35	; 0x23
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	2203      	movs	r2, #3
 8003052:	701a      	strb	r2, [r3, #0]
        goto error;
 8003054:	e01b      	b.n	800308e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d19d      	bne.n	8002f9c <HAL_SPI_TransmitReceive+0x290>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2246      	movs	r2, #70	; 0x46
 8003064:	5a9b      	ldrh	r3, [r3, r2]
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d197      	bne.n	8002f9c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	0018      	movs	r0, r3
 8003074:	f000 f9aa 	bl	80033cc <SPI_EndRxTxTransaction>
 8003078:	1e03      	subs	r3, r0, #0
 800307a:	d007      	beq.n	800308c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800307c:	2323      	movs	r3, #35	; 0x23
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	661a      	str	r2, [r3, #96]	; 0x60
 800308a:	e000      	b.n	800308e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800308c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	225d      	movs	r2, #93	; 0x5d
 8003092:	2101      	movs	r1, #1
 8003094:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	225c      	movs	r2, #92	; 0x5c
 800309a:	2100      	movs	r1, #0
 800309c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800309e:	2323      	movs	r3, #35	; 0x23
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	781b      	ldrb	r3, [r3, #0]
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b00a      	add	sp, #40	; 0x28
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	ffffefff 	.word	0xffffefff

080030b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030c0:	f7fd ffe0 	bl	8001084 <HAL_GetTick>
 80030c4:	0002      	movs	r2, r0
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	18d3      	adds	r3, r2, r3
 80030ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030d0:	f7fd ffd8 	bl	8001084 <HAL_GetTick>
 80030d4:	0003      	movs	r3, r0
 80030d6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030d8:	4b3a      	ldr	r3, [pc, #232]	; (80031c4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	015b      	lsls	r3, r3, #5
 80030de:	0d1b      	lsrs	r3, r3, #20
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	4353      	muls	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030e6:	e058      	b.n	800319a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	3301      	adds	r3, #1
 80030ec:	d055      	beq.n	800319a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030ee:	f7fd ffc9 	bl	8001084 <HAL_GetTick>
 80030f2:	0002      	movs	r2, r0
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d902      	bls.n	8003104 <SPI_WaitFlagStateUntilTimeout+0x54>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d142      	bne.n	800318a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	21e0      	movs	r1, #224	; 0xe0
 8003110:	438a      	bics	r2, r1
 8003112:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	2382      	movs	r3, #130	; 0x82
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	429a      	cmp	r2, r3
 800311e:	d113      	bne.n	8003148 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	429a      	cmp	r2, r3
 800312a:	d005      	beq.n	8003138 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	429a      	cmp	r2, r3
 8003136:	d107      	bne.n	8003148 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2140      	movs	r1, #64	; 0x40
 8003144:	438a      	bics	r2, r1
 8003146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	019b      	lsls	r3, r3, #6
 8003150:	429a      	cmp	r2, r3
 8003152:	d110      	bne.n	8003176 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	491a      	ldr	r1, [pc, #104]	; (80031c8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003160:	400a      	ands	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2180      	movs	r1, #128	; 0x80
 8003170:	0189      	lsls	r1, r1, #6
 8003172:	430a      	orrs	r2, r1
 8003174:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	225d      	movs	r2, #93	; 0x5d
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	225c      	movs	r2, #92	; 0x5c
 8003182:	2100      	movs	r1, #0
 8003184:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e017      	b.n	80031ba <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3b01      	subs	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	4013      	ands	r3, r2
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	425a      	negs	r2, r3
 80031aa:	4153      	adcs	r3, r2
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	001a      	movs	r2, r3
 80031b0:	1dfb      	adds	r3, r7, #7
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d197      	bne.n	80030e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	0018      	movs	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	b008      	add	sp, #32
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	20000004 	.word	0x20000004
 80031c8:	ffffdfff 	.word	0xffffdfff

080031cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031da:	2317      	movs	r3, #23
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031e2:	f7fd ff4f 	bl	8001084 <HAL_GetTick>
 80031e6:	0002      	movs	r2, r0
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	18d3      	adds	r3, r2, r3
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80031f2:	f7fd ff47 	bl	8001084 <HAL_GetTick>
 80031f6:	0003      	movs	r3, r0
 80031f8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	330c      	adds	r3, #12
 8003200:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003202:	4b41      	ldr	r3, [pc, #260]	; (8003308 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	0013      	movs	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	189b      	adds	r3, r3, r2
 800320c:	00da      	lsls	r2, r3, #3
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	0d1b      	lsrs	r3, r3, #20
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	4353      	muls	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003218:	e068      	b.n	80032ec <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	23c0      	movs	r3, #192	; 0xc0
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	429a      	cmp	r2, r3
 8003222:	d10a      	bne.n	800323a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d107      	bne.n	800323a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	2117      	movs	r1, #23
 8003232:	187b      	adds	r3, r7, r1
 8003234:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003236:	187b      	adds	r3, r7, r1
 8003238:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	d055      	beq.n	80032ec <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003240:	f7fd ff20 	bl	8001084 <HAL_GetTick>
 8003244:	0002      	movs	r2, r0
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324c:	429a      	cmp	r2, r3
 800324e:	d902      	bls.n	8003256 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	2b00      	cmp	r3, #0
 8003254:	d142      	bne.n	80032dc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	21e0      	movs	r1, #224	; 0xe0
 8003262:	438a      	bics	r2, r1
 8003264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	2382      	movs	r3, #130	; 0x82
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	429a      	cmp	r2, r3
 8003270:	d113      	bne.n	800329a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	429a      	cmp	r2, r3
 800327c:	d005      	beq.n	800328a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	429a      	cmp	r2, r3
 8003288:	d107      	bne.n	800329a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2140      	movs	r1, #64	; 0x40
 8003296:	438a      	bics	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	019b      	lsls	r3, r3, #6
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d110      	bne.n	80032c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4916      	ldr	r1, [pc, #88]	; (800330c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80032b2:	400a      	ands	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	0189      	lsls	r1, r1, #6
 80032c4:	430a      	orrs	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	225d      	movs	r2, #93	; 0x5d
 80032cc:	2101      	movs	r1, #1
 80032ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	225c      	movs	r2, #92	; 0x5c
 80032d4:	2100      	movs	r1, #0
 80032d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e010      	b.n	80032fe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d18e      	bne.n	800321a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b00a      	add	sp, #40	; 0x28
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	20000004 	.word	0x20000004
 800330c:	ffffdfff 	.word	0xffffdfff

08003310 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	2382      	movs	r3, #130	; 0x82
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	429a      	cmp	r2, r3
 8003326:	d113      	bne.n	8003350 <SPI_EndRxTransaction+0x40>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	429a      	cmp	r2, r3
 8003332:	d005      	beq.n	8003340 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	429a      	cmp	r2, r3
 800333e:	d107      	bne.n	8003350 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2140      	movs	r1, #64	; 0x40
 800334c:	438a      	bics	r2, r1
 800334e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	0013      	movs	r3, r2
 800335a:	2200      	movs	r2, #0
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	f7ff fea7 	bl	80030b0 <SPI_WaitFlagStateUntilTimeout>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d007      	beq.n	8003376 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	2220      	movs	r2, #32
 800336c:	431a      	orrs	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e026      	b.n	80033c4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	2382      	movs	r3, #130	; 0x82
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	429a      	cmp	r2, r3
 8003380:	d11f      	bne.n	80033c2 <SPI_EndRxTransaction+0xb2>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	429a      	cmp	r2, r3
 800338c:	d005      	beq.n	800339a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	429a      	cmp	r2, r3
 8003398:	d113      	bne.n	80033c2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	23c0      	movs	r3, #192	; 0xc0
 800339e:	00d9      	lsls	r1, r3, #3
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	0013      	movs	r3, r2
 80033a8:	2200      	movs	r2, #0
 80033aa:	f7ff ff0f 	bl	80031cc <SPI_WaitFifoStateUntilTimeout>
 80033ae:	1e03      	subs	r3, r0, #0
 80033b0:	d007      	beq.n	80033c2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b6:	2220      	movs	r2, #32
 80033b8:	431a      	orrs	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e000      	b.n	80033c4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b004      	add	sp, #16
 80033ca:	bd80      	pop	{r7, pc}

080033cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	23c0      	movs	r3, #192	; 0xc0
 80033dc:	0159      	lsls	r1, r3, #5
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	0013      	movs	r3, r2
 80033e6:	2200      	movs	r2, #0
 80033e8:	f7ff fef0 	bl	80031cc <SPI_WaitFifoStateUntilTimeout>
 80033ec:	1e03      	subs	r3, r0, #0
 80033ee:	d007      	beq.n	8003400 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f4:	2220      	movs	r2, #32
 80033f6:	431a      	orrs	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e027      	b.n	8003450 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	0013      	movs	r3, r2
 800340a:	2200      	movs	r2, #0
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	f7ff fe4f 	bl	80030b0 <SPI_WaitFlagStateUntilTimeout>
 8003412:	1e03      	subs	r3, r0, #0
 8003414:	d007      	beq.n	8003426 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341a:	2220      	movs	r2, #32
 800341c:	431a      	orrs	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e014      	b.n	8003450 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	23c0      	movs	r3, #192	; 0xc0
 800342a:	00d9      	lsls	r1, r3, #3
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	0013      	movs	r3, r2
 8003434:	2200      	movs	r2, #0
 8003436:	f7ff fec9 	bl	80031cc <SPI_WaitFifoStateUntilTimeout>
 800343a:	1e03      	subs	r3, r0, #0
 800343c:	d007      	beq.n	800344e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003442:	2220      	movs	r2, #32
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e000      	b.n	8003450 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b004      	add	sp, #16
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e046      	b.n	80034f8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2288      	movs	r2, #136	; 0x88
 800346e:	589b      	ldr	r3, [r3, r2]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2284      	movs	r2, #132	; 0x84
 8003478:	2100      	movs	r1, #0
 800347a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	0018      	movs	r0, r3
 8003480:	f7fd fc98 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2288      	movs	r2, #136	; 0x88
 8003488:	2124      	movs	r1, #36	; 0x24
 800348a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2101      	movs	r1, #1
 8003498:	438a      	bics	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	0018      	movs	r0, r3
 80034a0:	f000 f8cc 	bl	800363c <UART_SetConfig>
 80034a4:	0003      	movs	r3, r0
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e024      	b.n	80034f8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f000 fb7d 	bl	8003bb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	490d      	ldr	r1, [pc, #52]	; (8003500 <HAL_UART_Init+0xa8>)
 80034ca:	400a      	ands	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	212a      	movs	r1, #42	; 0x2a
 80034da:	438a      	bics	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2101      	movs	r1, #1
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 fc15 	bl	8003d20 <UART_CheckIdleState>
 80034f6:	0003      	movs	r3, r0
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	ffffb7ff 	.word	0xffffb7ff

08003504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	1dbb      	adds	r3, r7, #6
 8003512:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2288      	movs	r2, #136	; 0x88
 8003518:	589b      	ldr	r3, [r3, r2]
 800351a:	2b20      	cmp	r3, #32
 800351c:	d000      	beq.n	8003520 <HAL_UART_Transmit+0x1c>
 800351e:	e088      	b.n	8003632 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_UART_Transmit+0x2a>
 8003526:	1dbb      	adds	r3, r7, #6
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e080      	b.n	8003634 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	015b      	lsls	r3, r3, #5
 800353a:	429a      	cmp	r2, r3
 800353c:	d109      	bne.n	8003552 <HAL_UART_Transmit+0x4e>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d105      	bne.n	8003552 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2201      	movs	r2, #1
 800354a:	4013      	ands	r3, r2
 800354c:	d001      	beq.n	8003552 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e070      	b.n	8003634 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2290      	movs	r2, #144	; 0x90
 8003556:	2100      	movs	r1, #0
 8003558:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2288      	movs	r2, #136	; 0x88
 800355e:	2121      	movs	r1, #33	; 0x21
 8003560:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003562:	f7fd fd8f 	bl	8001084 <HAL_GetTick>
 8003566:	0003      	movs	r3, r0
 8003568:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1dba      	adds	r2, r7, #6
 800356e:	2154      	movs	r1, #84	; 0x54
 8003570:	8812      	ldrh	r2, [r2, #0]
 8003572:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1dba      	adds	r2, r7, #6
 8003578:	2156      	movs	r1, #86	; 0x56
 800357a:	8812      	ldrh	r2, [r2, #0]
 800357c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	015b      	lsls	r3, r3, #5
 8003586:	429a      	cmp	r2, r3
 8003588:	d108      	bne.n	800359c <HAL_UART_Transmit+0x98>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d104      	bne.n	800359c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	e003      	b.n	80035a4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035a4:	e02c      	b.n	8003600 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	0013      	movs	r3, r2
 80035b0:	2200      	movs	r2, #0
 80035b2:	2180      	movs	r1, #128	; 0x80
 80035b4:	f000 fc02 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 80035b8:	1e03      	subs	r3, r0, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e039      	b.n	8003634 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	001a      	movs	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	05d2      	lsls	r2, r2, #23
 80035d2:	0dd2      	lsrs	r2, r2, #23
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	3302      	adds	r3, #2
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	e007      	b.n	80035ee <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	781a      	ldrb	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	3301      	adds	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2256      	movs	r2, #86	; 0x56
 80035f2:	5a9b      	ldrh	r3, [r3, r2]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b299      	uxth	r1, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2256      	movs	r2, #86	; 0x56
 80035fe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2256      	movs	r2, #86	; 0x56
 8003604:	5a9b      	ldrh	r3, [r3, r2]
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1cc      	bne.n	80035a6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	0013      	movs	r3, r2
 8003616:	2200      	movs	r2, #0
 8003618:	2140      	movs	r1, #64	; 0x40
 800361a:	f000 fbcf 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 800361e:	1e03      	subs	r3, r0, #0
 8003620:	d001      	beq.n	8003626 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e006      	b.n	8003634 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2288      	movs	r2, #136	; 0x88
 800362a:	2120      	movs	r1, #32
 800362c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003632:	2302      	movs	r3, #2
  }
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b008      	add	sp, #32
 800363a:	bd80      	pop	{r7, pc}

0800363c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800363c:	b5b0      	push	{r4, r5, r7, lr}
 800363e:	b090      	sub	sp, #64	; 0x40
 8003640:	af00      	add	r7, sp, #0
 8003642:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003644:	231a      	movs	r3, #26
 8003646:	2220      	movs	r2, #32
 8003648:	189b      	adds	r3, r3, r2
 800364a:	19db      	adds	r3, r3, r7
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	431a      	orrs	r2, r3
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	431a      	orrs	r2, r3
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	4313      	orrs	r3, r2
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4aaf      	ldr	r2, [pc, #700]	; (800392c <UART_SetConfig+0x2f0>)
 8003670:	4013      	ands	r3, r2
 8003672:	0019      	movs	r1, r3
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367a:	430b      	orrs	r3, r1
 800367c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4aaa      	ldr	r2, [pc, #680]	; (8003930 <UART_SetConfig+0x2f4>)
 8003686:	4013      	ands	r3, r2
 8003688:	0018      	movs	r0, r3
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	68d9      	ldr	r1, [r3, #12]
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	0003      	movs	r3, r0
 8003694:	430b      	orrs	r3, r1
 8003696:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4aa4      	ldr	r2, [pc, #656]	; (8003934 <UART_SetConfig+0x2f8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ae:	4313      	orrs	r3, r2
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a9f      	ldr	r2, [pc, #636]	; (8003938 <UART_SetConfig+0x2fc>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	0019      	movs	r1, r3
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	220f      	movs	r2, #15
 80036d0:	4393      	bics	r3, r2
 80036d2:	0018      	movs	r0, r3
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	0003      	movs	r3, r0
 80036de:	430b      	orrs	r3, r1
 80036e0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a95      	ldr	r2, [pc, #596]	; (800393c <UART_SetConfig+0x300>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d131      	bne.n	8003750 <UART_SetConfig+0x114>
 80036ec:	4b94      	ldr	r3, [pc, #592]	; (8003940 <UART_SetConfig+0x304>)
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	2203      	movs	r2, #3
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d01d      	beq.n	8003734 <UART_SetConfig+0xf8>
 80036f8:	d823      	bhi.n	8003742 <UART_SetConfig+0x106>
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d00c      	beq.n	8003718 <UART_SetConfig+0xdc>
 80036fe:	d820      	bhi.n	8003742 <UART_SetConfig+0x106>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <UART_SetConfig+0xce>
 8003704:	2b01      	cmp	r3, #1
 8003706:	d00e      	beq.n	8003726 <UART_SetConfig+0xea>
 8003708:	e01b      	b.n	8003742 <UART_SetConfig+0x106>
 800370a:	231b      	movs	r3, #27
 800370c:	2220      	movs	r2, #32
 800370e:	189b      	adds	r3, r3, r2
 8003710:	19db      	adds	r3, r3, r7
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e0b4      	b.n	8003882 <UART_SetConfig+0x246>
 8003718:	231b      	movs	r3, #27
 800371a:	2220      	movs	r2, #32
 800371c:	189b      	adds	r3, r3, r2
 800371e:	19db      	adds	r3, r3, r7
 8003720:	2202      	movs	r2, #2
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e0ad      	b.n	8003882 <UART_SetConfig+0x246>
 8003726:	231b      	movs	r3, #27
 8003728:	2220      	movs	r2, #32
 800372a:	189b      	adds	r3, r3, r2
 800372c:	19db      	adds	r3, r3, r7
 800372e:	2204      	movs	r2, #4
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e0a6      	b.n	8003882 <UART_SetConfig+0x246>
 8003734:	231b      	movs	r3, #27
 8003736:	2220      	movs	r2, #32
 8003738:	189b      	adds	r3, r3, r2
 800373a:	19db      	adds	r3, r3, r7
 800373c:	2208      	movs	r2, #8
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	e09f      	b.n	8003882 <UART_SetConfig+0x246>
 8003742:	231b      	movs	r3, #27
 8003744:	2220      	movs	r2, #32
 8003746:	189b      	adds	r3, r3, r2
 8003748:	19db      	adds	r3, r3, r7
 800374a:	2210      	movs	r2, #16
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e098      	b.n	8003882 <UART_SetConfig+0x246>
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a7b      	ldr	r2, [pc, #492]	; (8003944 <UART_SetConfig+0x308>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d131      	bne.n	80037be <UART_SetConfig+0x182>
 800375a:	4b79      	ldr	r3, [pc, #484]	; (8003940 <UART_SetConfig+0x304>)
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	220c      	movs	r2, #12
 8003760:	4013      	ands	r3, r2
 8003762:	2b0c      	cmp	r3, #12
 8003764:	d01d      	beq.n	80037a2 <UART_SetConfig+0x166>
 8003766:	d823      	bhi.n	80037b0 <UART_SetConfig+0x174>
 8003768:	2b08      	cmp	r3, #8
 800376a:	d00c      	beq.n	8003786 <UART_SetConfig+0x14a>
 800376c:	d820      	bhi.n	80037b0 <UART_SetConfig+0x174>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <UART_SetConfig+0x13c>
 8003772:	2b04      	cmp	r3, #4
 8003774:	d00e      	beq.n	8003794 <UART_SetConfig+0x158>
 8003776:	e01b      	b.n	80037b0 <UART_SetConfig+0x174>
 8003778:	231b      	movs	r3, #27
 800377a:	2220      	movs	r2, #32
 800377c:	189b      	adds	r3, r3, r2
 800377e:	19db      	adds	r3, r3, r7
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	e07d      	b.n	8003882 <UART_SetConfig+0x246>
 8003786:	231b      	movs	r3, #27
 8003788:	2220      	movs	r2, #32
 800378a:	189b      	adds	r3, r3, r2
 800378c:	19db      	adds	r3, r3, r7
 800378e:	2202      	movs	r2, #2
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e076      	b.n	8003882 <UART_SetConfig+0x246>
 8003794:	231b      	movs	r3, #27
 8003796:	2220      	movs	r2, #32
 8003798:	189b      	adds	r3, r3, r2
 800379a:	19db      	adds	r3, r3, r7
 800379c:	2204      	movs	r2, #4
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e06f      	b.n	8003882 <UART_SetConfig+0x246>
 80037a2:	231b      	movs	r3, #27
 80037a4:	2220      	movs	r2, #32
 80037a6:	189b      	adds	r3, r3, r2
 80037a8:	19db      	adds	r3, r3, r7
 80037aa:	2208      	movs	r2, #8
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e068      	b.n	8003882 <UART_SetConfig+0x246>
 80037b0:	231b      	movs	r3, #27
 80037b2:	2220      	movs	r2, #32
 80037b4:	189b      	adds	r3, r3, r2
 80037b6:	19db      	adds	r3, r3, r7
 80037b8:	2210      	movs	r2, #16
 80037ba:	701a      	strb	r2, [r3, #0]
 80037bc:	e061      	b.n	8003882 <UART_SetConfig+0x246>
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a61      	ldr	r2, [pc, #388]	; (8003948 <UART_SetConfig+0x30c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d106      	bne.n	80037d6 <UART_SetConfig+0x19a>
 80037c8:	231b      	movs	r3, #27
 80037ca:	2220      	movs	r2, #32
 80037cc:	189b      	adds	r3, r3, r2
 80037ce:	19db      	adds	r3, r3, r7
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e055      	b.n	8003882 <UART_SetConfig+0x246>
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a5c      	ldr	r2, [pc, #368]	; (800394c <UART_SetConfig+0x310>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d106      	bne.n	80037ee <UART_SetConfig+0x1b2>
 80037e0:	231b      	movs	r3, #27
 80037e2:	2220      	movs	r2, #32
 80037e4:	189b      	adds	r3, r3, r2
 80037e6:	19db      	adds	r3, r3, r7
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e049      	b.n	8003882 <UART_SetConfig+0x246>
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a50      	ldr	r2, [pc, #320]	; (8003934 <UART_SetConfig+0x2f8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d13e      	bne.n	8003876 <UART_SetConfig+0x23a>
 80037f8:	4b51      	ldr	r3, [pc, #324]	; (8003940 <UART_SetConfig+0x304>)
 80037fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037fc:	23c0      	movs	r3, #192	; 0xc0
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4013      	ands	r3, r2
 8003802:	22c0      	movs	r2, #192	; 0xc0
 8003804:	0112      	lsls	r2, r2, #4
 8003806:	4293      	cmp	r3, r2
 8003808:	d027      	beq.n	800385a <UART_SetConfig+0x21e>
 800380a:	22c0      	movs	r2, #192	; 0xc0
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	4293      	cmp	r3, r2
 8003810:	d82a      	bhi.n	8003868 <UART_SetConfig+0x22c>
 8003812:	2280      	movs	r2, #128	; 0x80
 8003814:	0112      	lsls	r2, r2, #4
 8003816:	4293      	cmp	r3, r2
 8003818:	d011      	beq.n	800383e <UART_SetConfig+0x202>
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	0112      	lsls	r2, r2, #4
 800381e:	4293      	cmp	r3, r2
 8003820:	d822      	bhi.n	8003868 <UART_SetConfig+0x22c>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d004      	beq.n	8003830 <UART_SetConfig+0x1f4>
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	00d2      	lsls	r2, r2, #3
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <UART_SetConfig+0x210>
 800382e:	e01b      	b.n	8003868 <UART_SetConfig+0x22c>
 8003830:	231b      	movs	r3, #27
 8003832:	2220      	movs	r2, #32
 8003834:	189b      	adds	r3, r3, r2
 8003836:	19db      	adds	r3, r3, r7
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	e021      	b.n	8003882 <UART_SetConfig+0x246>
 800383e:	231b      	movs	r3, #27
 8003840:	2220      	movs	r2, #32
 8003842:	189b      	adds	r3, r3, r2
 8003844:	19db      	adds	r3, r3, r7
 8003846:	2202      	movs	r2, #2
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e01a      	b.n	8003882 <UART_SetConfig+0x246>
 800384c:	231b      	movs	r3, #27
 800384e:	2220      	movs	r2, #32
 8003850:	189b      	adds	r3, r3, r2
 8003852:	19db      	adds	r3, r3, r7
 8003854:	2204      	movs	r2, #4
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	e013      	b.n	8003882 <UART_SetConfig+0x246>
 800385a:	231b      	movs	r3, #27
 800385c:	2220      	movs	r2, #32
 800385e:	189b      	adds	r3, r3, r2
 8003860:	19db      	adds	r3, r3, r7
 8003862:	2208      	movs	r2, #8
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e00c      	b.n	8003882 <UART_SetConfig+0x246>
 8003868:	231b      	movs	r3, #27
 800386a:	2220      	movs	r2, #32
 800386c:	189b      	adds	r3, r3, r2
 800386e:	19db      	adds	r3, r3, r7
 8003870:	2210      	movs	r2, #16
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	e005      	b.n	8003882 <UART_SetConfig+0x246>
 8003876:	231b      	movs	r3, #27
 8003878:	2220      	movs	r2, #32
 800387a:	189b      	adds	r3, r3, r2
 800387c:	19db      	adds	r3, r3, r7
 800387e:	2210      	movs	r2, #16
 8003880:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2b      	ldr	r2, [pc, #172]	; (8003934 <UART_SetConfig+0x2f8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d000      	beq.n	800388e <UART_SetConfig+0x252>
 800388c:	e0a9      	b.n	80039e2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800388e:	231b      	movs	r3, #27
 8003890:	2220      	movs	r2, #32
 8003892:	189b      	adds	r3, r3, r2
 8003894:	19db      	adds	r3, r3, r7
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d015      	beq.n	80038c8 <UART_SetConfig+0x28c>
 800389c:	dc18      	bgt.n	80038d0 <UART_SetConfig+0x294>
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d00d      	beq.n	80038be <UART_SetConfig+0x282>
 80038a2:	dc15      	bgt.n	80038d0 <UART_SetConfig+0x294>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <UART_SetConfig+0x272>
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d005      	beq.n	80038b8 <UART_SetConfig+0x27c>
 80038ac:	e010      	b.n	80038d0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ae:	f7fe fbb3 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 80038b2:	0003      	movs	r3, r0
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038b6:	e014      	b.n	80038e2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b8:	4b25      	ldr	r3, [pc, #148]	; (8003950 <UART_SetConfig+0x314>)
 80038ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038bc:	e011      	b.n	80038e2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038be:	f7fe fb1f 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 80038c2:	0003      	movs	r3, r0
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038c6:	e00c      	b.n	80038e2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038ce:	e008      	b.n	80038e2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80038d4:	231a      	movs	r3, #26
 80038d6:	2220      	movs	r2, #32
 80038d8:	189b      	adds	r3, r3, r2
 80038da:	19db      	adds	r3, r3, r7
 80038dc:	2201      	movs	r2, #1
 80038de:	701a      	strb	r2, [r3, #0]
        break;
 80038e0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d100      	bne.n	80038ea <UART_SetConfig+0x2ae>
 80038e8:	e14b      	b.n	8003b82 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ee:	4b19      	ldr	r3, [pc, #100]	; (8003954 <UART_SetConfig+0x318>)
 80038f0:	0052      	lsls	r2, r2, #1
 80038f2:	5ad3      	ldrh	r3, [r2, r3]
 80038f4:	0019      	movs	r1, r3
 80038f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038f8:	f7fc fc16 	bl	8000128 <__udivsi3>
 80038fc:	0003      	movs	r3, r0
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	0013      	movs	r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	189b      	adds	r3, r3, r2
 800390a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800390c:	429a      	cmp	r2, r3
 800390e:	d305      	bcc.n	800391c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003918:	429a      	cmp	r2, r3
 800391a:	d91d      	bls.n	8003958 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800391c:	231a      	movs	r3, #26
 800391e:	2220      	movs	r2, #32
 8003920:	189b      	adds	r3, r3, r2
 8003922:	19db      	adds	r3, r3, r7
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e12b      	b.n	8003b82 <UART_SetConfig+0x546>
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	cfff69f3 	.word	0xcfff69f3
 8003930:	ffffcfff 	.word	0xffffcfff
 8003934:	40008000 	.word	0x40008000
 8003938:	11fff4ff 	.word	0x11fff4ff
 800393c:	40013800 	.word	0x40013800
 8003940:	40021000 	.word	0x40021000
 8003944:	40004400 	.word	0x40004400
 8003948:	40004800 	.word	0x40004800
 800394c:	40004c00 	.word	0x40004c00
 8003950:	00f42400 	.word	0x00f42400
 8003954:	08005218 	.word	0x08005218
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003964:	4b92      	ldr	r3, [pc, #584]	; (8003bb0 <UART_SetConfig+0x574>)
 8003966:	0052      	lsls	r2, r2, #1
 8003968:	5ad3      	ldrh	r3, [r2, r3]
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	69b8      	ldr	r0, [r7, #24]
 8003976:	69f9      	ldr	r1, [r7, #28]
 8003978:	f7fc fd4c 	bl	8000414 <__aeabi_uldivmod>
 800397c:	0002      	movs	r2, r0
 800397e:	000b      	movs	r3, r1
 8003980:	0e11      	lsrs	r1, r2, #24
 8003982:	021d      	lsls	r5, r3, #8
 8003984:	430d      	orrs	r5, r1
 8003986:	0214      	lsls	r4, r2, #8
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68b8      	ldr	r0, [r7, #8]
 8003996:	68f9      	ldr	r1, [r7, #12]
 8003998:	1900      	adds	r0, r0, r4
 800399a:	4169      	adcs	r1, r5
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f7fc fd33 	bl	8000414 <__aeabi_uldivmod>
 80039ae:	0002      	movs	r2, r0
 80039b0:	000b      	movs	r3, r1
 80039b2:	0013      	movs	r3, r2
 80039b4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b8:	23c0      	movs	r3, #192	; 0xc0
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	429a      	cmp	r2, r3
 80039be:	d309      	bcc.n	80039d4 <UART_SetConfig+0x398>
 80039c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	035b      	lsls	r3, r3, #13
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d204      	bcs.n	80039d4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	e0d6      	b.n	8003b82 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80039d4:	231a      	movs	r3, #26
 80039d6:	2220      	movs	r2, #32
 80039d8:	189b      	adds	r3, r3, r2
 80039da:	19db      	adds	r3, r3, r7
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e0cf      	b.n	8003b82 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d000      	beq.n	80039f0 <UART_SetConfig+0x3b4>
 80039ee:	e070      	b.n	8003ad2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80039f0:	231b      	movs	r3, #27
 80039f2:	2220      	movs	r2, #32
 80039f4:	189b      	adds	r3, r3, r2
 80039f6:	19db      	adds	r3, r3, r7
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d015      	beq.n	8003a2a <UART_SetConfig+0x3ee>
 80039fe:	dc18      	bgt.n	8003a32 <UART_SetConfig+0x3f6>
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d00d      	beq.n	8003a20 <UART_SetConfig+0x3e4>
 8003a04:	dc15      	bgt.n	8003a32 <UART_SetConfig+0x3f6>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <UART_SetConfig+0x3d4>
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d005      	beq.n	8003a1a <UART_SetConfig+0x3de>
 8003a0e:	e010      	b.n	8003a32 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a10:	f7fe fb02 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 8003a14:	0003      	movs	r3, r0
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a18:	e014      	b.n	8003a44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a1a:	4b66      	ldr	r3, [pc, #408]	; (8003bb4 <UART_SetConfig+0x578>)
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a1e:	e011      	b.n	8003a44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a20:	f7fe fa6e 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8003a24:	0003      	movs	r3, r0
 8003a26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a28:	e00c      	b.n	8003a44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a30:	e008      	b.n	8003a44 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003a36:	231a      	movs	r3, #26
 8003a38:	2220      	movs	r2, #32
 8003a3a:	189b      	adds	r3, r3, r2
 8003a3c:	19db      	adds	r3, r3, r7
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
        break;
 8003a42:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d100      	bne.n	8003a4c <UART_SetConfig+0x410>
 8003a4a:	e09a      	b.n	8003b82 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a50:	4b57      	ldr	r3, [pc, #348]	; (8003bb0 <UART_SetConfig+0x574>)
 8003a52:	0052      	lsls	r2, r2, #1
 8003a54:	5ad3      	ldrh	r3, [r2, r3]
 8003a56:	0019      	movs	r1, r3
 8003a58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a5a:	f7fc fb65 	bl	8000128 <__udivsi3>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	005a      	lsls	r2, r3, #1
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	18d2      	adds	r2, r2, r3
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	0019      	movs	r1, r3
 8003a70:	0010      	movs	r0, r2
 8003a72:	f7fc fb59 	bl	8000128 <__udivsi3>
 8003a76:	0003      	movs	r3, r0
 8003a78:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	2b0f      	cmp	r3, #15
 8003a7e:	d921      	bls.n	8003ac4 <UART_SetConfig+0x488>
 8003a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	025b      	lsls	r3, r3, #9
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d21c      	bcs.n	8003ac4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	200e      	movs	r0, #14
 8003a90:	2420      	movs	r4, #32
 8003a92:	1903      	adds	r3, r0, r4
 8003a94:	19db      	adds	r3, r3, r7
 8003a96:	210f      	movs	r1, #15
 8003a98:	438a      	bics	r2, r1
 8003a9a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2207      	movs	r2, #7
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	b299      	uxth	r1, r3
 8003aa8:	1903      	adds	r3, r0, r4
 8003aaa:	19db      	adds	r3, r3, r7
 8003aac:	1902      	adds	r2, r0, r4
 8003aae:	19d2      	adds	r2, r2, r7
 8003ab0:	8812      	ldrh	r2, [r2, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	1902      	adds	r2, r0, r4
 8003abc:	19d2      	adds	r2, r2, r7
 8003abe:	8812      	ldrh	r2, [r2, #0]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	e05e      	b.n	8003b82 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003ac4:	231a      	movs	r3, #26
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	189b      	adds	r3, r3, r2
 8003aca:	19db      	adds	r3, r3, r7
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e057      	b.n	8003b82 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ad2:	231b      	movs	r3, #27
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	19db      	adds	r3, r3, r7
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d015      	beq.n	8003b0c <UART_SetConfig+0x4d0>
 8003ae0:	dc18      	bgt.n	8003b14 <UART_SetConfig+0x4d8>
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d00d      	beq.n	8003b02 <UART_SetConfig+0x4c6>
 8003ae6:	dc15      	bgt.n	8003b14 <UART_SetConfig+0x4d8>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <UART_SetConfig+0x4b6>
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d005      	beq.n	8003afc <UART_SetConfig+0x4c0>
 8003af0:	e010      	b.n	8003b14 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af2:	f7fe fa91 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 8003af6:	0003      	movs	r3, r0
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003afa:	e014      	b.n	8003b26 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003afc:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <UART_SetConfig+0x578>)
 8003afe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b00:	e011      	b.n	8003b26 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b02:	f7fe f9fd 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8003b06:	0003      	movs	r3, r0
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b0a:	e00c      	b.n	8003b26 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b12:	e008      	b.n	8003b26 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003b18:	231a      	movs	r3, #26
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	189b      	adds	r3, r3, r2
 8003b1e:	19db      	adds	r3, r3, r7
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
        break;
 8003b24:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d02a      	beq.n	8003b82 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b30:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <UART_SetConfig+0x574>)
 8003b32:	0052      	lsls	r2, r2, #1
 8003b34:	5ad3      	ldrh	r3, [r2, r3]
 8003b36:	0019      	movs	r1, r3
 8003b38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b3a:	f7fc faf5 	bl	8000128 <__udivsi3>
 8003b3e:	0003      	movs	r3, r0
 8003b40:	001a      	movs	r2, r3
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	18d2      	adds	r2, r2, r3
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	0019      	movs	r1, r3
 8003b50:	0010      	movs	r0, r2
 8003b52:	f7fc fae9 	bl	8000128 <__udivsi3>
 8003b56:	0003      	movs	r3, r0
 8003b58:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	2b0f      	cmp	r3, #15
 8003b5e:	d90a      	bls.n	8003b76 <UART_SetConfig+0x53a>
 8003b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	025b      	lsls	r3, r3, #9
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d205      	bcs.n	8003b76 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60da      	str	r2, [r3, #12]
 8003b74:	e005      	b.n	8003b82 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003b76:	231a      	movs	r3, #26
 8003b78:	2220      	movs	r2, #32
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	19db      	adds	r3, r3, r7
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	226a      	movs	r2, #106	; 0x6a
 8003b86:	2101      	movs	r1, #1
 8003b88:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	2268      	movs	r2, #104	; 0x68
 8003b8e:	2101      	movs	r1, #1
 8003b90:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	2200      	movs	r2, #0
 8003b96:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003b9e:	231a      	movs	r3, #26
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	189b      	adds	r3, r3, r2
 8003ba4:	19db      	adds	r3, r3, r7
 8003ba6:	781b      	ldrb	r3, [r3, #0]
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b010      	add	sp, #64	; 0x40
 8003bae:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb0:	08005218 	.word	0x08005218
 8003bb4:	00f42400 	.word	0x00f42400

08003bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a4a      	ldr	r2, [pc, #296]	; (8003cfc <UART_AdvFeatureConfig+0x144>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	2202      	movs	r2, #2
 8003be8:	4013      	ands	r3, r2
 8003bea:	d00b      	beq.n	8003c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4a43      	ldr	r2, [pc, #268]	; (8003d00 <UART_AdvFeatureConfig+0x148>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	2204      	movs	r2, #4
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4a3b      	ldr	r2, [pc, #236]	; (8003d04 <UART_AdvFeatureConfig+0x14c>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d00b      	beq.n	8003c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4a34      	ldr	r2, [pc, #208]	; (8003d08 <UART_AdvFeatureConfig+0x150>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	2210      	movs	r2, #16
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d00b      	beq.n	8003c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4a2c      	ldr	r2, [pc, #176]	; (8003d0c <UART_AdvFeatureConfig+0x154>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	2220      	movs	r2, #32
 8003c70:	4013      	ands	r3, r2
 8003c72:	d00b      	beq.n	8003c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	4a25      	ldr	r2, [pc, #148]	; (8003d10 <UART_AdvFeatureConfig+0x158>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	2240      	movs	r2, #64	; 0x40
 8003c92:	4013      	ands	r3, r2
 8003c94:	d01d      	beq.n	8003cd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	4a1d      	ldr	r2, [pc, #116]	; (8003d14 <UART_AdvFeatureConfig+0x15c>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb2:	2380      	movs	r3, #128	; 0x80
 8003cb4:	035b      	lsls	r3, r3, #13
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d10b      	bne.n	8003cd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <UART_AdvFeatureConfig+0x160>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <UART_AdvFeatureConfig+0x164>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	fffdffff 	.word	0xfffdffff
 8003d00:	fffeffff 	.word	0xfffeffff
 8003d04:	fffbffff 	.word	0xfffbffff
 8003d08:	ffff7fff 	.word	0xffff7fff
 8003d0c:	ffffefff 	.word	0xffffefff
 8003d10:	ffffdfff 	.word	0xffffdfff
 8003d14:	ffefffff 	.word	0xffefffff
 8003d18:	ff9fffff 	.word	0xff9fffff
 8003d1c:	fff7ffff 	.word	0xfff7ffff

08003d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2290      	movs	r2, #144	; 0x90
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d30:	f7fd f9a8 	bl	8001084 <HAL_GetTick>
 8003d34:	0003      	movs	r3, r0
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2208      	movs	r2, #8
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d10c      	bne.n	8003d60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2280      	movs	r2, #128	; 0x80
 8003d4a:	0391      	lsls	r1, r2, #14
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4a1a      	ldr	r2, [pc, #104]	; (8003db8 <UART_CheckIdleState+0x98>)
 8003d50:	9200      	str	r2, [sp, #0]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f000 f832 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 8003d58:	1e03      	subs	r3, r0, #0
 8003d5a:	d001      	beq.n	8003d60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e026      	b.n	8003dae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2204      	movs	r2, #4
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d10c      	bne.n	8003d88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	03d1      	lsls	r1, r2, #15
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <UART_CheckIdleState+0x98>)
 8003d78:	9200      	str	r2, [sp, #0]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f000 f81e 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 8003d80:	1e03      	subs	r3, r0, #0
 8003d82:	d001      	beq.n	8003d88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e012      	b.n	8003dae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2288      	movs	r2, #136	; 0x88
 8003d8c:	2120      	movs	r1, #32
 8003d8e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	228c      	movs	r2, #140	; 0x8c
 8003d94:	2120      	movs	r1, #32
 8003d96:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2284      	movs	r2, #132	; 0x84
 8003da8:	2100      	movs	r1, #0
 8003daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b004      	add	sp, #16
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	01ffffff 	.word	0x01ffffff

08003dbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b094      	sub	sp, #80	; 0x50
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	1dfb      	adds	r3, r7, #7
 8003dca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dcc:	e0a7      	b.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	d100      	bne.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003dd4:	e0a3      	b.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd6:	f7fd f955 	bl	8001084 <HAL_GetTick>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d302      	bcc.n	8003dec <UART_WaitOnFlagUntilTimeout+0x30>
 8003de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d13f      	bne.n	8003e6c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dec:	f3ef 8310 	mrs	r3, PRIMASK
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003df4:	647b      	str	r3, [r7, #68]	; 0x44
 8003df6:	2301      	movs	r3, #1
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	f383 8810 	msr	PRIMASK, r3
}
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	494e      	ldr	r1, [pc, #312]	; (8003f48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003e0e:	400a      	ands	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e14:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	f383 8810 	msr	PRIMASK, r3
}
 8003e1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e26:	643b      	str	r3, [r7, #64]	; 0x40
 8003e28:	2301      	movs	r3, #1
 8003e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	f383 8810 	msr	PRIMASK, r3
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2101      	movs	r1, #1
 8003e40:	438a      	bics	r2, r1
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4a:	f383 8810 	msr	PRIMASK, r3
}
 8003e4e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2288      	movs	r2, #136	; 0x88
 8003e54:	2120      	movs	r1, #32
 8003e56:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	228c      	movs	r2, #140	; 0x8c
 8003e5c:	2120      	movs	r1, #32
 8003e5e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2284      	movs	r2, #132	; 0x84
 8003e64:	2100      	movs	r1, #0
 8003e66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e069      	b.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2204      	movs	r2, #4
 8003e74:	4013      	ands	r3, r2
 8003e76:	d052      	beq.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	401a      	ands	r2, r3
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d148      	bne.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2280      	movs	r2, #128	; 0x80
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e96:	f3ef 8310 	mrs	r3, PRIMASK
 8003e9a:	613b      	str	r3, [r7, #16]
  return(result);
 8003e9c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f383 8810 	msr	PRIMASK, r3
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4924      	ldr	r1, [pc, #144]	; (8003f48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003eb8:	400a      	ands	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f383 8810 	msr	PRIMASK, r3
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ecc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ece:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f383 8810 	msr	PRIMASK, r3
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2101      	movs	r1, #1
 8003eea:	438a      	bics	r2, r1
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	f383 8810 	msr	PRIMASK, r3
}
 8003ef8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2288      	movs	r2, #136	; 0x88
 8003efe:	2120      	movs	r1, #32
 8003f00:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	228c      	movs	r2, #140	; 0x8c
 8003f06:	2120      	movs	r1, #32
 8003f08:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2290      	movs	r2, #144	; 0x90
 8003f0e:	2120      	movs	r1, #32
 8003f10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2284      	movs	r2, #132	; 0x84
 8003f16:	2100      	movs	r1, #0
 8003f18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e010      	b.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	425a      	negs	r2, r3
 8003f2e:	4153      	adcs	r3, r2
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	001a      	movs	r2, r3
 8003f34:	1dfb      	adds	r3, r7, #7
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d100      	bne.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x182>
 8003f3c:	e747      	b.n	8003dce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	0018      	movs	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b014      	add	sp, #80	; 0x50
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	fffffe5f 	.word	0xfffffe5f

08003f4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2284      	movs	r2, #132	; 0x84
 8003f58:	5c9b      	ldrb	r3, [r3, r2]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_UARTEx_DisableFifoMode+0x16>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e027      	b.n	8003fb2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2284      	movs	r2, #132	; 0x84
 8003f66:	2101      	movs	r1, #1
 8003f68:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2288      	movs	r2, #136	; 0x88
 8003f6e:	2124      	movs	r1, #36	; 0x24
 8003f70:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2101      	movs	r1, #1
 8003f86:	438a      	bics	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4a0b      	ldr	r2, [pc, #44]	; (8003fbc <HAL_UARTEx_DisableFifoMode+0x70>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2288      	movs	r2, #136	; 0x88
 8003fa4:	2120      	movs	r1, #32
 8003fa6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2284      	movs	r2, #132	; 0x84
 8003fac:	2100      	movs	r1, #0
 8003fae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b004      	add	sp, #16
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	dfffffff 	.word	0xdfffffff

08003fc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2284      	movs	r2, #132	; 0x84
 8003fce:	5c9b      	ldrb	r3, [r3, r2]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e02e      	b.n	8004036 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2284      	movs	r2, #132	; 0x84
 8003fdc:	2101      	movs	r1, #1
 8003fde:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2288      	movs	r2, #136	; 0x88
 8003fe4:	2124      	movs	r1, #36	; 0x24
 8003fe6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	438a      	bics	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	08d9      	lsrs	r1, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	0018      	movs	r0, r3
 8004018:	f000 f854 	bl	80040c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2288      	movs	r2, #136	; 0x88
 8004028:	2120      	movs	r1, #32
 800402a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2284      	movs	r2, #132	; 0x84
 8004030:	2100      	movs	r1, #0
 8004032:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	0018      	movs	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	b004      	add	sp, #16
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2284      	movs	r2, #132	; 0x84
 800404e:	5c9b      	ldrb	r3, [r3, r2]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004054:	2302      	movs	r3, #2
 8004056:	e02f      	b.n	80040b8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2284      	movs	r2, #132	; 0x84
 800405c:	2101      	movs	r1, #1
 800405e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2288      	movs	r2, #136	; 0x88
 8004064:	2124      	movs	r1, #36	; 0x24
 8004066:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2101      	movs	r1, #1
 800407c:	438a      	bics	r2, r1
 800407e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	4a0e      	ldr	r2, [pc, #56]	; (80040c0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004088:	4013      	ands	r3, r2
 800408a:	0019      	movs	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f000 f813 	bl	80040c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2288      	movs	r2, #136	; 0x88
 80040aa:	2120      	movs	r1, #32
 80040ac:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2284      	movs	r2, #132	; 0x84
 80040b2:	2100      	movs	r1, #0
 80040b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b004      	add	sp, #16
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	f1ffffff 	.word	0xf1ffffff

080040c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d108      	bne.n	80040e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	226a      	movs	r2, #106	; 0x6a
 80040d8:	2101      	movs	r1, #1
 80040da:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2268      	movs	r2, #104	; 0x68
 80040e0:	2101      	movs	r1, #1
 80040e2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80040e4:	e043      	b.n	800416e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80040e6:	260f      	movs	r6, #15
 80040e8:	19bb      	adds	r3, r7, r6
 80040ea:	2208      	movs	r2, #8
 80040ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80040ee:	200e      	movs	r0, #14
 80040f0:	183b      	adds	r3, r7, r0
 80040f2:	2208      	movs	r2, #8
 80040f4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	0e5b      	lsrs	r3, r3, #25
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	240d      	movs	r4, #13
 8004102:	193b      	adds	r3, r7, r4
 8004104:	2107      	movs	r1, #7
 8004106:	400a      	ands	r2, r1
 8004108:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	0f5b      	lsrs	r3, r3, #29
 8004112:	b2da      	uxtb	r2, r3
 8004114:	250c      	movs	r5, #12
 8004116:	197b      	adds	r3, r7, r5
 8004118:	2107      	movs	r1, #7
 800411a:	400a      	ands	r2, r1
 800411c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800411e:	183b      	adds	r3, r7, r0
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	197a      	adds	r2, r7, r5
 8004124:	7812      	ldrb	r2, [r2, #0]
 8004126:	4914      	ldr	r1, [pc, #80]	; (8004178 <UARTEx_SetNbDataToProcess+0xb4>)
 8004128:	5c8a      	ldrb	r2, [r1, r2]
 800412a:	435a      	muls	r2, r3
 800412c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800412e:	197b      	adds	r3, r7, r5
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	4a12      	ldr	r2, [pc, #72]	; (800417c <UARTEx_SetNbDataToProcess+0xb8>)
 8004134:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004136:	0019      	movs	r1, r3
 8004138:	f7fc f880 	bl	800023c <__divsi3>
 800413c:	0003      	movs	r3, r0
 800413e:	b299      	uxth	r1, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	226a      	movs	r2, #106	; 0x6a
 8004144:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004146:	19bb      	adds	r3, r7, r6
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	193a      	adds	r2, r7, r4
 800414c:	7812      	ldrb	r2, [r2, #0]
 800414e:	490a      	ldr	r1, [pc, #40]	; (8004178 <UARTEx_SetNbDataToProcess+0xb4>)
 8004150:	5c8a      	ldrb	r2, [r1, r2]
 8004152:	435a      	muls	r2, r3
 8004154:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004156:	193b      	adds	r3, r7, r4
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	4a08      	ldr	r2, [pc, #32]	; (800417c <UARTEx_SetNbDataToProcess+0xb8>)
 800415c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800415e:	0019      	movs	r1, r3
 8004160:	f7fc f86c 	bl	800023c <__divsi3>
 8004164:	0003      	movs	r3, r0
 8004166:	b299      	uxth	r1, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2268      	movs	r2, #104	; 0x68
 800416c:	5299      	strh	r1, [r3, r2]
}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	46bd      	mov	sp, r7
 8004172:	b005      	add	sp, #20
 8004174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	08005230 	.word	0x08005230
 800417c:	08005238 	.word	0x08005238

08004180 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	0008      	movs	r0, r1
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	0019      	movs	r1, r3
 800418e:	260b      	movs	r6, #11
 8004190:	19bb      	adds	r3, r7, r6
 8004192:	1c02      	adds	r2, r0, #0
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	2508      	movs	r5, #8
 8004198:	197b      	adds	r3, r7, r5
 800419a:	1c0a      	adds	r2, r1, #0
 800419c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685c      	ldr	r4, [r3, #4]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	68d8      	ldr	r0, [r3, #12]
 80041a6:	197b      	adds	r3, r7, r5
 80041a8:	881d      	ldrh	r5, [r3, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	19bb      	adds	r3, r7, r6
 80041ae:	7819      	ldrb	r1, [r3, #0]
 80041b0:	002b      	movs	r3, r5
 80041b2:	47a0      	blx	r4
 80041b4:	0003      	movs	r3, r0
 80041b6:	617b      	str	r3, [r7, #20]

  return ret;
 80041b8:	697b      	ldr	r3, [r7, #20]
}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b007      	add	sp, #28
 80041c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041c2 <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80041c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c4:	b087      	sub	sp, #28
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	0008      	movs	r0, r1
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	0019      	movs	r1, r3
 80041d0:	260b      	movs	r6, #11
 80041d2:	19bb      	adds	r3, r7, r6
 80041d4:	1c02      	adds	r2, r0, #0
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	2508      	movs	r5, #8
 80041da:	197b      	adds	r3, r7, r5
 80041dc:	1c0a      	adds	r2, r1, #0
 80041de:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681c      	ldr	r4, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68d8      	ldr	r0, [r3, #12]
 80041e8:	197b      	adds	r3, r7, r5
 80041ea:	881d      	ldrh	r5, [r3, #0]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	19bb      	adds	r3, r7, r6
 80041f0:	7819      	ldrb	r1, [r3, #0]
 80041f2:	002b      	movs	r3, r5
 80041f4:	47a0      	blx	r4
 80041f6:	0003      	movs	r3, r0
 80041f8:	617b      	str	r3, [r7, #20]

  return ret;
 80041fa:	697b      	ldr	r3, [r7, #20]
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b007      	add	sp, #28
 8004202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004204 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8004204:	b590      	push	{r4, r7, lr}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	000a      	movs	r2, r1
 800420e:	1cfb      	adds	r3, r7, #3
 8004210:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004212:	2410      	movs	r4, #16
 8004214:	193a      	adds	r2, r7, r4
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	2301      	movs	r3, #1
 800421a:	2120      	movs	r1, #32
 800421c:	f7ff ffb0 	bl	8004180 <lis2dw12_read_reg>
 8004220:	0003      	movs	r3, r0
 8004222:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d129      	bne.n	800427e <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800422a:	1cfb      	adds	r3, r7, #3
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	1c1a      	adds	r2, r3, #0
 8004232:	2303      	movs	r3, #3
 8004234:	4013      	ands	r3, r2
 8004236:	b2da      	uxtb	r2, r3
 8004238:	193b      	adds	r3, r7, r4
 800423a:	2103      	movs	r1, #3
 800423c:	400a      	ands	r2, r1
 800423e:	0090      	lsls	r0, r2, #2
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	210c      	movs	r1, #12
 8004244:	438a      	bics	r2, r1
 8004246:	1c11      	adds	r1, r2, #0
 8004248:	1c02      	adds	r2, r0, #0
 800424a:	430a      	orrs	r2, r1
 800424c:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 800424e:	1cfb      	adds	r3, r7, #3
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2203      	movs	r2, #3
 8004254:	4013      	ands	r3, r2
 8004256:	b2da      	uxtb	r2, r3
 8004258:	193b      	adds	r3, r7, r4
 800425a:	2103      	movs	r1, #3
 800425c:	400a      	ands	r2, r1
 800425e:	0010      	movs	r0, r2
 8004260:	781a      	ldrb	r2, [r3, #0]
 8004262:	2103      	movs	r1, #3
 8004264:	438a      	bics	r2, r1
 8004266:	1c11      	adds	r1, r2, #0
 8004268:	1c02      	adds	r2, r0, #0
 800426a:	430a      	orrs	r2, r1
 800426c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800426e:	193a      	adds	r2, r7, r4
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	2301      	movs	r3, #1
 8004274:	2120      	movs	r1, #32
 8004276:	f7ff ffa4 	bl	80041c2 <lis2dw12_write_reg>
 800427a:	0003      	movs	r3, r0
 800427c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d108      	bne.n	8004296 <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004284:	230c      	movs	r3, #12
 8004286:	18fa      	adds	r2, r7, r3
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	2301      	movs	r3, #1
 800428c:	2125      	movs	r1, #37	; 0x25
 800428e:	f7ff ff77 	bl	8004180 <lis2dw12_read_reg>
 8004292:	0003      	movs	r3, r0
 8004294:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11a      	bne.n	80042d2 <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800429c:	1cfb      	adds	r3, r7, #3
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	1c1a      	adds	r2, r3, #0
 80042a4:	2301      	movs	r3, #1
 80042a6:	4013      	ands	r3, r2
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	240c      	movs	r4, #12
 80042ac:	193b      	adds	r3, r7, r4
 80042ae:	2101      	movs	r1, #1
 80042b0:	400a      	ands	r2, r1
 80042b2:	0090      	lsls	r0, r2, #2
 80042b4:	781a      	ldrb	r2, [r3, #0]
 80042b6:	2104      	movs	r1, #4
 80042b8:	438a      	bics	r2, r1
 80042ba:	1c11      	adds	r1, r2, #0
 80042bc:	1c02      	adds	r2, r0, #0
 80042be:	430a      	orrs	r2, r1
 80042c0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80042c2:	193a      	adds	r2, r7, r4
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	2301      	movs	r3, #1
 80042c8:	2125      	movs	r1, #37	; 0x25
 80042ca:	f7ff ff7a 	bl	80041c2 <lis2dw12_write_reg>
 80042ce:	0003      	movs	r3, r0
 80042d0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80042d2:	697b      	ldr	r3, [r7, #20]
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b007      	add	sp, #28
 80042da:	bd90      	pop	{r4, r7, pc}

080042dc <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	000a      	movs	r2, r1
 80042e6:	1cfb      	adds	r3, r7, #3
 80042e8:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80042ea:	2410      	movs	r4, #16
 80042ec:	193a      	adds	r2, r7, r4
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	2301      	movs	r3, #1
 80042f2:	2120      	movs	r1, #32
 80042f4:	f7ff ff44 	bl	8004180 <lis2dw12_read_reg>
 80042f8:	0003      	movs	r3, r0
 80042fa:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d115      	bne.n	800432e <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8004302:	1cfb      	adds	r3, r7, #3
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	220f      	movs	r2, #15
 8004308:	4013      	ands	r3, r2
 800430a:	b2da      	uxtb	r2, r3
 800430c:	193b      	adds	r3, r7, r4
 800430e:	0110      	lsls	r0, r2, #4
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	210f      	movs	r1, #15
 8004314:	400a      	ands	r2, r1
 8004316:	1c11      	adds	r1, r2, #0
 8004318:	1c02      	adds	r2, r0, #0
 800431a:	430a      	orrs	r2, r1
 800431c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800431e:	193a      	adds	r2, r7, r4
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	2301      	movs	r3, #1
 8004324:	2120      	movs	r1, #32
 8004326:	f7ff ff4c 	bl	80041c2 <lis2dw12_write_reg>
 800432a:	0003      	movs	r3, r0
 800432c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d108      	bne.n	8004346 <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004334:	230c      	movs	r3, #12
 8004336:	18fa      	adds	r2, r7, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	2301      	movs	r3, #1
 800433c:	2122      	movs	r1, #34	; 0x22
 800433e:	f7ff ff1f 	bl	8004180 <lis2dw12_read_reg>
 8004342:	0003      	movs	r3, r0
 8004344:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d11a      	bne.n	8004382 <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800434c:	1cfb      	adds	r3, r7, #3
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	1c1a      	adds	r2, r3, #0
 8004354:	2303      	movs	r3, #3
 8004356:	4013      	ands	r3, r2
 8004358:	b2da      	uxtb	r2, r3
 800435a:	240c      	movs	r4, #12
 800435c:	193b      	adds	r3, r7, r4
 800435e:	2103      	movs	r1, #3
 8004360:	400a      	ands	r2, r1
 8004362:	0010      	movs	r0, r2
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	2103      	movs	r1, #3
 8004368:	438a      	bics	r2, r1
 800436a:	1c11      	adds	r1, r2, #0
 800436c:	1c02      	adds	r2, r0, #0
 800436e:	430a      	orrs	r2, r1
 8004370:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004372:	193a      	adds	r2, r7, r4
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	2301      	movs	r3, #1
 8004378:	2122      	movs	r1, #34	; 0x22
 800437a:	f7ff ff22 	bl	80041c2 <lis2dw12_write_reg>
 800437e:	0003      	movs	r3, r0
 8004380:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004382:	697b      	ldr	r3, [r7, #20]
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b007      	add	sp, #28
 800438a:	bd90      	pop	{r4, r7, pc}

0800438c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 800438c:	b590      	push	{r4, r7, lr}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	000a      	movs	r2, r1
 8004396:	1cfb      	adds	r3, r7, #3
 8004398:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800439a:	2408      	movs	r4, #8
 800439c:	193a      	adds	r2, r7, r4
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	2301      	movs	r3, #1
 80043a2:	2125      	movs	r1, #37	; 0x25
 80043a4:	f7ff feec 	bl	8004180 <lis2dw12_read_reg>
 80043a8:	0003      	movs	r3, r0
 80043aa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d117      	bne.n	80043e2 <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 80043b2:	1cfb      	adds	r3, r7, #3
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2203      	movs	r2, #3
 80043b8:	4013      	ands	r3, r2
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	193b      	adds	r3, r7, r4
 80043be:	2103      	movs	r1, #3
 80043c0:	400a      	ands	r2, r1
 80043c2:	0110      	lsls	r0, r2, #4
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	2130      	movs	r1, #48	; 0x30
 80043c8:	438a      	bics	r2, r1
 80043ca:	1c11      	adds	r1, r2, #0
 80043cc:	1c02      	adds	r2, r0, #0
 80043ce:	430a      	orrs	r2, r1
 80043d0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80043d2:	193a      	adds	r2, r7, r4
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	2301      	movs	r3, #1
 80043d8:	2125      	movs	r1, #37	; 0x25
 80043da:	f7ff fef2 	bl	80041c2 <lis2dw12_write_reg>
 80043de:	0003      	movs	r3, r0
 80043e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80043e2:	68fb      	ldr	r3, [r7, #12]
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b005      	add	sp, #20
 80043ea:	bd90      	pop	{r4, r7, pc}

080043ec <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	2301      	movs	r3, #1
 80043fc:	210f      	movs	r1, #15
 80043fe:	f7ff febf 	bl	8004180 <lis2dw12_read_reg>
 8004402:	0003      	movs	r3, r0
 8004404:	60fb      	str	r3, [r7, #12]

  return ret;
 8004406:	68fb      	ldr	r3, [r7, #12]
}
 8004408:	0018      	movs	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	b004      	add	sp, #16
 800440e:	bd80      	pop	{r7, pc}

08004410 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	000a      	movs	r2, r1
 800441a:	1cfb      	adds	r3, r7, #3
 800441c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800441e:	2408      	movs	r4, #8
 8004420:	193a      	adds	r2, r7, r4
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	2301      	movs	r3, #1
 8004426:	2121      	movs	r1, #33	; 0x21
 8004428:	f7ff feaa 	bl	8004180 <lis2dw12_read_reg>
 800442c:	0003      	movs	r3, r0
 800442e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d117      	bne.n	8004466 <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 8004436:	1cfb      	adds	r3, r7, #3
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2201      	movs	r2, #1
 800443c:	4013      	ands	r3, r2
 800443e:	b2da      	uxtb	r2, r3
 8004440:	193b      	adds	r3, r7, r4
 8004442:	2101      	movs	r1, #1
 8004444:	400a      	ands	r2, r1
 8004446:	0190      	lsls	r0, r2, #6
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	2140      	movs	r1, #64	; 0x40
 800444c:	438a      	bics	r2, r1
 800444e:	1c11      	adds	r1, r2, #0
 8004450:	1c02      	adds	r2, r0, #0
 8004452:	430a      	orrs	r2, r1
 8004454:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004456:	193a      	adds	r2, r7, r4
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	2301      	movs	r3, #1
 800445c:	2121      	movs	r1, #33	; 0x21
 800445e:	f7ff feb0 	bl	80041c2 <lis2dw12_write_reg>
 8004462:	0003      	movs	r3, r0
 8004464:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004466:	68fb      	ldr	r3, [r7, #12]
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b005      	add	sp, #20
 800446e:	bd90      	pop	{r4, r7, pc}

08004470 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800447a:	2408      	movs	r4, #8
 800447c:	193a      	adds	r2, r7, r4
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	2301      	movs	r3, #1
 8004482:	2121      	movs	r1, #33	; 0x21
 8004484:	f7ff fe7c 	bl	8004180 <lis2dw12_read_reg>
 8004488:	0003      	movs	r3, r0
 800448a:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 800448c:	193b      	adds	r3, r7, r4
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	065b      	lsls	r3, r3, #25
 8004492:	0fdb      	lsrs	r3, r3, #31
 8004494:	b2db      	uxtb	r3, r3
 8004496:	001a      	movs	r2, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	701a      	strb	r2, [r3, #0]

  return ret;
 800449c:	68fb      	ldr	r3, [r7, #12]
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b005      	add	sp, #20
 80044a4:	bd90      	pop	{r4, r7, pc}

080044a6 <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 80044a6:	b590      	push	{r4, r7, lr}
 80044a8:	b087      	sub	sp, #28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	000a      	movs	r2, r1
 80044b0:	1cfb      	adds	r3, r7, #3
 80044b2:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80044b4:	2410      	movs	r4, #16
 80044b6:	193a      	adds	r2, r7, r4
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	2301      	movs	r3, #1
 80044bc:	2125      	movs	r1, #37	; 0x25
 80044be:	f7ff fe5f 	bl	8004180 <lis2dw12_read_reg>
 80044c2:	0003      	movs	r3, r0
 80044c4:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d119      	bne.n	8004500 <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 80044cc:	1cfb      	adds	r3, r7, #3
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	1c1a      	adds	r2, r3, #0
 80044d4:	2301      	movs	r3, #1
 80044d6:	4013      	ands	r3, r2
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	193b      	adds	r3, r7, r4
 80044dc:	2101      	movs	r1, #1
 80044de:	400a      	ands	r2, r1
 80044e0:	00d0      	lsls	r0, r2, #3
 80044e2:	781a      	ldrb	r2, [r3, #0]
 80044e4:	2108      	movs	r1, #8
 80044e6:	438a      	bics	r2, r1
 80044e8:	1c11      	adds	r1, r2, #0
 80044ea:	1c02      	adds	r2, r0, #0
 80044ec:	430a      	orrs	r2, r1
 80044ee:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80044f0:	193a      	adds	r2, r7, r4
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	2301      	movs	r3, #1
 80044f6:	2125      	movs	r1, #37	; 0x25
 80044f8:	f7ff fe63 	bl	80041c2 <lis2dw12_write_reg>
 80044fc:	0003      	movs	r3, r0
 80044fe:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d108      	bne.n	8004518 <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 8004506:	230c      	movs	r3, #12
 8004508:	18fa      	adds	r2, r7, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	2301      	movs	r3, #1
 800450e:	213f      	movs	r1, #63	; 0x3f
 8004510:	f7ff fe36 	bl	8004180 <lis2dw12_read_reg>
 8004514:	0003      	movs	r3, r0
 8004516:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d118      	bne.n	8004550 <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 800451e:	1cfb      	adds	r3, r7, #3
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2201      	movs	r2, #1
 8004524:	4013      	ands	r3, r2
 8004526:	b2da      	uxtb	r2, r3
 8004528:	240c      	movs	r4, #12
 800452a:	193b      	adds	r3, r7, r4
 800452c:	2101      	movs	r1, #1
 800452e:	400a      	ands	r2, r1
 8004530:	0110      	lsls	r0, r2, #4
 8004532:	781a      	ldrb	r2, [r3, #0]
 8004534:	2110      	movs	r1, #16
 8004536:	438a      	bics	r2, r1
 8004538:	1c11      	adds	r1, r2, #0
 800453a:	1c02      	adds	r2, r0, #0
 800453c:	430a      	orrs	r2, r1
 800453e:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8004540:	193a      	adds	r2, r7, r4
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	2301      	movs	r3, #1
 8004546:	213f      	movs	r1, #63	; 0x3f
 8004548:	f7ff fe3b 	bl	80041c2 <lis2dw12_write_reg>
 800454c:	0003      	movs	r3, r0
 800454e:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8004550:	697b      	ldr	r3, [r7, #20]
}
 8004552:	0018      	movs	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	b007      	add	sp, #28
 8004558:	bd90      	pop	{r4, r7, pc}

0800455a <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8004564:	2310      	movs	r3, #16
 8004566:	18fa      	adds	r2, r7, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	2301      	movs	r3, #1
 800456c:	2124      	movs	r1, #36	; 0x24
 800456e:	f7ff fe07 	bl	8004180 <lis2dw12_read_reg>
 8004572:	0003      	movs	r3, r0
 8004574:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d108      	bne.n	800458e <lis2dw12_pin_int1_route_set+0x34>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 800457c:	230c      	movs	r3, #12
 800457e:	18fa      	adds	r2, r7, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	2301      	movs	r3, #1
 8004584:	213f      	movs	r1, #63	; 0x3f
 8004586:	f7ff fdfb 	bl	8004180 <lis2dw12_read_reg>
 800458a:	0003      	movs	r3, r0
 800458c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d146      	bne.n	8004622 <lis2dw12_pin_int1_route_set+0xc8>
  {
    if ((val->int1_tap |
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	071b      	lsls	r3, r3, #28
 800459a:	0fdb      	lsrs	r3, r3, #31
 800459c:	b2da      	uxtb	r2, r3
         val->int1_ff |
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	06db      	lsls	r3, r3, #27
 80045a4:	0fdb      	lsrs	r3, r3, #31
 80045a6:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 80045a8:	4313      	orrs	r3, r2
 80045aa:	b2da      	uxtb	r2, r3
         val->int1_wu |
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	069b      	lsls	r3, r3, #26
 80045b2:	0fdb      	lsrs	r3, r3, #31
 80045b4:	b2db      	uxtb	r3, r3
         val->int1_ff |
 80045b6:	4313      	orrs	r3, r2
 80045b8:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	065b      	lsls	r3, r3, #25
 80045c0:	0fdb      	lsrs	r3, r3, #31
 80045c2:	b2db      	uxtb	r3, r3
         val->int1_wu |
 80045c4:	4313      	orrs	r3, r2
 80045c6:	b2da      	uxtb	r2, r3
         val->int1_6d |
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	0fdb      	lsrs	r3, r3, #31
 80045d0:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 80045d2:	4313      	orrs	r3, r2
 80045d4:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80045d6:	2110      	movs	r1, #16
 80045d8:	187b      	adds	r3, r7, r1
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	0fdb      	lsrs	r3, r3, #31
 80045e0:	b2db      	uxtb	r3, r3
         val->int1_6d |
 80045e2:	4313      	orrs	r3, r2
 80045e4:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 80045e6:	187b      	adds	r3, r7, r1
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	065b      	lsls	r3, r3, #25
 80045ec:	0fdb      	lsrs	r3, r3, #31
 80045ee:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80045f0:	4313      	orrs	r3, r2
 80045f2:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d006      	beq.n	8004606 <lis2dw12_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 80045f8:	230c      	movs	r3, #12
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	781a      	ldrb	r2, [r3, #0]
 80045fe:	2120      	movs	r1, #32
 8004600:	430a      	orrs	r2, r1
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	e005      	b.n	8004612 <lis2dw12_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8004606:	230c      	movs	r3, #12
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	781a      	ldrb	r2, [r3, #0]
 800460c:	2120      	movs	r1, #32
 800460e:	438a      	bics	r2, r1
 8004610:	701a      	strb	r2, [r3, #0]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	2301      	movs	r3, #1
 8004618:	2123      	movs	r1, #35	; 0x23
 800461a:	f7ff fdd2 	bl	80041c2 <lis2dw12_write_reg>
 800461e:	0003      	movs	r3, r0
 8004620:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d108      	bne.n	800463a <lis2dw12_pin_int1_route_set+0xe0>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8004628:	230c      	movs	r3, #12
 800462a:	18fa      	adds	r2, r7, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	2301      	movs	r3, #1
 8004630:	213f      	movs	r1, #63	; 0x3f
 8004632:	f7ff fdc6 	bl	80041c2 <lis2dw12_write_reg>
 8004636:	0003      	movs	r3, r0
 8004638:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800463a:	697b      	ldr	r3, [r7, #20]
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b006      	add	sp, #24
 8004642:	bd80      	pop	{r7, pc}

08004644 <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	2301      	movs	r3, #1
 8004654:	2123      	movs	r1, #35	; 0x23
 8004656:	f7ff fd93 	bl	8004180 <lis2dw12_read_reg>
 800465a:	0003      	movs	r3, r0
 800465c:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 800465e:	68fb      	ldr	r3, [r7, #12]
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b004      	add	sp, #16
 8004666:	bd80      	pop	{r7, pc}

08004668 <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004668:	b590      	push	{r4, r7, lr}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	000a      	movs	r2, r1
 8004672:	1cfb      	adds	r3, r7, #3
 8004674:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8004676:	2408      	movs	r4, #8
 8004678:	193a      	adds	r2, r7, r4
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	2301      	movs	r3, #1
 800467e:	2134      	movs	r1, #52	; 0x34
 8004680:	f7ff fd7e 	bl	8004180 <lis2dw12_read_reg>
 8004684:	0003      	movs	r3, r0
 8004686:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d117      	bne.n	80046be <lis2dw12_wkup_threshold_set+0x56>
  {
    reg.wk_ths = val;
 800468e:	1cfb      	adds	r3, r7, #3
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	223f      	movs	r2, #63	; 0x3f
 8004694:	4013      	ands	r3, r2
 8004696:	b2da      	uxtb	r2, r3
 8004698:	193b      	adds	r3, r7, r4
 800469a:	213f      	movs	r1, #63	; 0x3f
 800469c:	400a      	ands	r2, r1
 800469e:	0010      	movs	r0, r2
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	213f      	movs	r1, #63	; 0x3f
 80046a4:	438a      	bics	r2, r1
 80046a6:	1c11      	adds	r1, r2, #0
 80046a8:	1c02      	adds	r2, r0, #0
 80046aa:	430a      	orrs	r2, r1
 80046ac:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 80046ae:	193a      	adds	r2, r7, r4
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	2301      	movs	r3, #1
 80046b4:	2134      	movs	r1, #52	; 0x34
 80046b6:	f7ff fd84 	bl	80041c2 <lis2dw12_write_reg>
 80046ba:	0003      	movs	r3, r0
 80046bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80046be:	68fb      	ldr	r3, [r7, #12]
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b005      	add	sp, #20
 80046c6:	bd90      	pop	{r4, r7, pc}

080046c8 <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	000a      	movs	r2, r1
 80046d2:	1cfb      	adds	r3, r7, #3
 80046d4:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 80046d6:	2408      	movs	r4, #8
 80046d8:	193a      	adds	r2, r7, r4
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	2301      	movs	r3, #1
 80046de:	2135      	movs	r1, #53	; 0x35
 80046e0:	f7ff fd4e 	bl	8004180 <lis2dw12_read_reg>
 80046e4:	0003      	movs	r3, r0
 80046e6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d117      	bne.n	800471e <lis2dw12_wkup_dur_set+0x56>
  {
    reg.wake_dur = val;
 80046ee:	1cfb      	adds	r3, r7, #3
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2203      	movs	r2, #3
 80046f4:	4013      	ands	r3, r2
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	193b      	adds	r3, r7, r4
 80046fa:	2103      	movs	r1, #3
 80046fc:	400a      	ands	r2, r1
 80046fe:	0150      	lsls	r0, r2, #5
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	2160      	movs	r1, #96	; 0x60
 8004704:	438a      	bics	r2, r1
 8004706:	1c11      	adds	r1, r2, #0
 8004708:	1c02      	adds	r2, r0, #0
 800470a:	430a      	orrs	r2, r1
 800470c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 800470e:	193a      	adds	r2, r7, r4
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	2301      	movs	r3, #1
 8004714:	2135      	movs	r1, #53	; 0x35
 8004716:	f7ff fd54 	bl	80041c2 <lis2dw12_write_reg>
 800471a:	0003      	movs	r3, r0
 800471c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800471e:	68fb      	ldr	r3, [r7, #12]
}
 8004720:	0018      	movs	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	b005      	add	sp, #20
 8004726:	bd90      	pop	{r4, r7, pc}

08004728 <my_lis2dw12_init>:

#include "my_lis2dw12.h"


bool my_lis2dw12_init ( stmdev_ctx_t* ctx )
{
 8004728:	b590      	push	{r4, r7, lr}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	uint8_t rst = 1 ;
 8004730:	230f      	movs	r3, #15
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
	lis2dw12_reg_t int_route ;

	//Restore default configuration
	lis2dw12_reset_set ( ctx , PROPERTY_ENABLE ) ;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2101      	movs	r1, #1
 800473c:	0018      	movs	r0, r3
 800473e:	f7ff fe67 	bl	8004410 <lis2dw12_reset_set>
	do {
		lis2dw12_reset_get ( ctx, &rst ) ;
 8004742:	240f      	movs	r4, #15
 8004744:	193a      	adds	r2, r7, r4
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	0011      	movs	r1, r2
 800474a:	0018      	movs	r0, r3
 800474c:	f7ff fe90 	bl	8004470 <lis2dw12_reset_get>
	} while ( rst ) ;
 8004750:	193b      	adds	r3, r7, r4
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1f4      	bne.n	8004742 <my_lis2dw12_init+0x1a>

	if ( my_lis2dw12_get_id ( ctx ) == LIS2DW12_ID )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	0018      	movs	r0, r3
 800475c:	f000 f83b 	bl	80047d6 <my_lis2dw12_get_id>
 8004760:	0003      	movs	r3, r0
 8004762:	2b44      	cmp	r3, #68	; 0x44
 8004764:	d132      	bne.n	80047cc <my_lis2dw12_init+0xa4>
		lis2dw12_pin_int1_route_get ( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
		int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
		lis2dw12_pin_int1_route_set ( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
		//my_is2dw12_print_conf ( ctx ) ;
		*/
		lis2dw12_full_scale_set 		( ctx , LIS2DW12_2g ) ;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2100      	movs	r1, #0
 800476a:	0018      	movs	r0, r3
 800476c:	f7ff fe0e 	bl	800438c <lis2dw12_full_scale_set>
		lis2dw12_power_mode_set 		( ctx , LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2110      	movs	r1, #16
 8004774:	0018      	movs	r0, r3
 8004776:	f7ff fd45 	bl	8004204 <lis2dw12_power_mode_set>
		lis2dw12_data_rate_set 		( ctx , LIS2DW12_XL_ODR_200Hz ) ;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2106      	movs	r1, #6
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff fdac 	bl	80042dc <lis2dw12_data_rate_set>
		lis2dw12_filter_path_set 		( ctx , LIS2DW12_HIGH_PASS_ON_OUT ) ;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2110      	movs	r1, #16
 8004788:	0018      	movs	r0, r3
 800478a:	f7ff fe8c 	bl	80044a6 <lis2dw12_filter_path_set>
		lis2dw12_wkup_dur_set			( ctx , 0 ) ;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2100      	movs	r1, #0
 8004792:	0018      	movs	r0, r3
 8004794:	f7ff ff98 	bl	80046c8 <lis2dw12_wkup_dur_set>
		lis2dw12_wkup_threshold_set	( ctx, 2 ) ;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2102      	movs	r1, #2
 800479c:	0018      	movs	r0, r3
 800479e:	f7ff ff63 	bl	8004668 <lis2dw12_wkup_threshold_set>
		lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 80047a2:	240c      	movs	r4, #12
 80047a4:	193a      	adds	r2, r7, r4
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	0011      	movs	r1, r2
 80047aa:	0018      	movs	r0, r3
 80047ac:	f7ff ff4a 	bl	8004644 <lis2dw12_pin_int1_route_get>
		int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 80047b0:	0020      	movs	r0, r4
 80047b2:	183b      	adds	r3, r7, r0
 80047b4:	781a      	ldrb	r2, [r3, #0]
 80047b6:	2120      	movs	r1, #32
 80047b8:	430a      	orrs	r2, r1
 80047ba:	701a      	strb	r2, [r3, #0]
		lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 80047bc:	183a      	adds	r2, r7, r0
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0011      	movs	r1, r2
 80047c2:	0018      	movs	r0, r3
 80047c4:	f7ff fec9 	bl	800455a <lis2dw12_pin_int1_route_set>
		return true ;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <my_lis2dw12_init+0xa6>
	}

	return false ;
 80047cc:	2300      	movs	r3, #0

}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b005      	add	sp, #20
 80047d4:	bd90      	pop	{r4, r7, pc}

080047d6 <my_lis2dw12_get_id>:

uint8_t my_lis2dw12_get_id ( stmdev_ctx_t* ctx )
{
 80047d6:	b590      	push	{r4, r7, lr}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
	uint8_t id = 0 ;
 80047de:	210f      	movs	r1, #15
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get ( ctx , &id ) ;
 80047e6:	000c      	movs	r4, r1
 80047e8:	187a      	adds	r2, r7, r1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0011      	movs	r1, r2
 80047ee:	0018      	movs	r0, r3
 80047f0:	f7ff fdfc 	bl	80043ec <lis2dw12_device_id_get>
	return id ;
 80047f4:	193b      	adds	r3, r7, r4
 80047f6:	781b      	ldrb	r3, [r3, #0]
}
 80047f8:	0018      	movs	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b005      	add	sp, #20
 80047fe:	bd90      	pop	{r4, r7, pc}

08004800 <siprintf>:
 8004800:	b40e      	push	{r1, r2, r3}
 8004802:	b500      	push	{lr}
 8004804:	490b      	ldr	r1, [pc, #44]	; (8004834 <siprintf+0x34>)
 8004806:	b09c      	sub	sp, #112	; 0x70
 8004808:	ab1d      	add	r3, sp, #116	; 0x74
 800480a:	9002      	str	r0, [sp, #8]
 800480c:	9006      	str	r0, [sp, #24]
 800480e:	9107      	str	r1, [sp, #28]
 8004810:	9104      	str	r1, [sp, #16]
 8004812:	4809      	ldr	r0, [pc, #36]	; (8004838 <siprintf+0x38>)
 8004814:	4909      	ldr	r1, [pc, #36]	; (800483c <siprintf+0x3c>)
 8004816:	cb04      	ldmia	r3!, {r2}
 8004818:	9105      	str	r1, [sp, #20]
 800481a:	6800      	ldr	r0, [r0, #0]
 800481c:	a902      	add	r1, sp, #8
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	f000 f9ac 	bl	8004b7c <_svfiprintf_r>
 8004824:	2200      	movs	r2, #0
 8004826:	9b02      	ldr	r3, [sp, #8]
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	b01c      	add	sp, #112	; 0x70
 800482c:	bc08      	pop	{r3}
 800482e:	b003      	add	sp, #12
 8004830:	4718      	bx	r3
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	7fffffff 	.word	0x7fffffff
 8004838:	2000005c 	.word	0x2000005c
 800483c:	ffff0208 	.word	0xffff0208

08004840 <memset>:
 8004840:	0003      	movs	r3, r0
 8004842:	1882      	adds	r2, r0, r2
 8004844:	4293      	cmp	r3, r2
 8004846:	d100      	bne.n	800484a <memset+0xa>
 8004848:	4770      	bx	lr
 800484a:	7019      	strb	r1, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	e7f9      	b.n	8004844 <memset+0x4>

08004850 <__errno>:
 8004850:	4b01      	ldr	r3, [pc, #4]	; (8004858 <__errno+0x8>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	4770      	bx	lr
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	2000005c 	.word	0x2000005c

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	2600      	movs	r6, #0
 8004860:	4c0c      	ldr	r4, [pc, #48]	; (8004894 <__libc_init_array+0x38>)
 8004862:	4d0d      	ldr	r5, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004864:	1b64      	subs	r4, r4, r5
 8004866:	10a4      	asrs	r4, r4, #2
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	2600      	movs	r6, #0
 800486e:	f000 fc6d 	bl	800514c <_init>
 8004872:	4c0a      	ldr	r4, [pc, #40]	; (800489c <__libc_init_array+0x40>)
 8004874:	4d0a      	ldr	r5, [pc, #40]	; (80048a0 <__libc_init_array+0x44>)
 8004876:	1b64      	subs	r4, r4, r5
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	00b3      	lsls	r3, r6, #2
 8004882:	58eb      	ldr	r3, [r5, r3]
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	00b3      	lsls	r3, r6, #2
 800488c:	58eb      	ldr	r3, [r5, r3]
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	0800527c 	.word	0x0800527c
 8004898:	0800527c 	.word	0x0800527c
 800489c:	08005280 	.word	0x08005280
 80048a0:	0800527c 	.word	0x0800527c

080048a4 <__retarget_lock_acquire_recursive>:
 80048a4:	4770      	bx	lr

080048a6 <__retarget_lock_release_recursive>:
 80048a6:	4770      	bx	lr

080048a8 <memcpy>:
 80048a8:	2300      	movs	r3, #0
 80048aa:	b510      	push	{r4, lr}
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d100      	bne.n	80048b2 <memcpy+0xa>
 80048b0:	bd10      	pop	{r4, pc}
 80048b2:	5ccc      	ldrb	r4, [r1, r3]
 80048b4:	54c4      	strb	r4, [r0, r3]
 80048b6:	3301      	adds	r3, #1
 80048b8:	e7f8      	b.n	80048ac <memcpy+0x4>
	...

080048bc <_free_r>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	0005      	movs	r5, r0
 80048c0:	2900      	cmp	r1, #0
 80048c2:	d010      	beq.n	80048e6 <_free_r+0x2a>
 80048c4:	1f0c      	subs	r4, r1, #4
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	da00      	bge.n	80048ce <_free_r+0x12>
 80048cc:	18e4      	adds	r4, r4, r3
 80048ce:	0028      	movs	r0, r5
 80048d0:	f000 f8e2 	bl	8004a98 <__malloc_lock>
 80048d4:	4a1d      	ldr	r2, [pc, #116]	; (800494c <_free_r+0x90>)
 80048d6:	6813      	ldr	r3, [r2, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <_free_r+0x2c>
 80048dc:	6063      	str	r3, [r4, #4]
 80048de:	6014      	str	r4, [r2, #0]
 80048e0:	0028      	movs	r0, r5
 80048e2:	f000 f8e1 	bl	8004aa8 <__malloc_unlock>
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d908      	bls.n	80048fe <_free_r+0x42>
 80048ec:	6820      	ldr	r0, [r4, #0]
 80048ee:	1821      	adds	r1, r4, r0
 80048f0:	428b      	cmp	r3, r1
 80048f2:	d1f3      	bne.n	80048dc <_free_r+0x20>
 80048f4:	6819      	ldr	r1, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	1809      	adds	r1, r1, r0
 80048fa:	6021      	str	r1, [r4, #0]
 80048fc:	e7ee      	b.n	80048dc <_free_r+0x20>
 80048fe:	001a      	movs	r2, r3
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <_free_r+0x4e>
 8004906:	42a3      	cmp	r3, r4
 8004908:	d9f9      	bls.n	80048fe <_free_r+0x42>
 800490a:	6811      	ldr	r1, [r2, #0]
 800490c:	1850      	adds	r0, r2, r1
 800490e:	42a0      	cmp	r0, r4
 8004910:	d10b      	bne.n	800492a <_free_r+0x6e>
 8004912:	6820      	ldr	r0, [r4, #0]
 8004914:	1809      	adds	r1, r1, r0
 8004916:	1850      	adds	r0, r2, r1
 8004918:	6011      	str	r1, [r2, #0]
 800491a:	4283      	cmp	r3, r0
 800491c:	d1e0      	bne.n	80048e0 <_free_r+0x24>
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	1841      	adds	r1, r0, r1
 8004924:	6011      	str	r1, [r2, #0]
 8004926:	6053      	str	r3, [r2, #4]
 8004928:	e7da      	b.n	80048e0 <_free_r+0x24>
 800492a:	42a0      	cmp	r0, r4
 800492c:	d902      	bls.n	8004934 <_free_r+0x78>
 800492e:	230c      	movs	r3, #12
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	e7d5      	b.n	80048e0 <_free_r+0x24>
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	1821      	adds	r1, r4, r0
 8004938:	428b      	cmp	r3, r1
 800493a:	d103      	bne.n	8004944 <_free_r+0x88>
 800493c:	6819      	ldr	r1, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	1809      	adds	r1, r1, r0
 8004942:	6021      	str	r1, [r4, #0]
 8004944:	6063      	str	r3, [r4, #4]
 8004946:	6054      	str	r4, [r2, #4]
 8004948:	e7ca      	b.n	80048e0 <_free_r+0x24>
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	20000300 	.word	0x20000300

08004950 <sbrk_aligned>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	4e0f      	ldr	r6, [pc, #60]	; (8004990 <sbrk_aligned+0x40>)
 8004954:	000d      	movs	r5, r1
 8004956:	6831      	ldr	r1, [r6, #0]
 8004958:	0004      	movs	r4, r0
 800495a:	2900      	cmp	r1, #0
 800495c:	d102      	bne.n	8004964 <sbrk_aligned+0x14>
 800495e:	f000 fba1 	bl	80050a4 <_sbrk_r>
 8004962:	6030      	str	r0, [r6, #0]
 8004964:	0029      	movs	r1, r5
 8004966:	0020      	movs	r0, r4
 8004968:	f000 fb9c 	bl	80050a4 <_sbrk_r>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d00a      	beq.n	8004986 <sbrk_aligned+0x36>
 8004970:	2303      	movs	r3, #3
 8004972:	1cc5      	adds	r5, r0, #3
 8004974:	439d      	bics	r5, r3
 8004976:	42a8      	cmp	r0, r5
 8004978:	d007      	beq.n	800498a <sbrk_aligned+0x3a>
 800497a:	1a29      	subs	r1, r5, r0
 800497c:	0020      	movs	r0, r4
 800497e:	f000 fb91 	bl	80050a4 <_sbrk_r>
 8004982:	3001      	adds	r0, #1
 8004984:	d101      	bne.n	800498a <sbrk_aligned+0x3a>
 8004986:	2501      	movs	r5, #1
 8004988:	426d      	negs	r5, r5
 800498a:	0028      	movs	r0, r5
 800498c:	bd70      	pop	{r4, r5, r6, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	20000304 	.word	0x20000304

08004994 <_malloc_r>:
 8004994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004996:	2203      	movs	r2, #3
 8004998:	1ccb      	adds	r3, r1, #3
 800499a:	4393      	bics	r3, r2
 800499c:	3308      	adds	r3, #8
 800499e:	0006      	movs	r6, r0
 80049a0:	001f      	movs	r7, r3
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d238      	bcs.n	8004a18 <_malloc_r+0x84>
 80049a6:	270c      	movs	r7, #12
 80049a8:	42b9      	cmp	r1, r7
 80049aa:	d837      	bhi.n	8004a1c <_malloc_r+0x88>
 80049ac:	0030      	movs	r0, r6
 80049ae:	f000 f873 	bl	8004a98 <__malloc_lock>
 80049b2:	4b38      	ldr	r3, [pc, #224]	; (8004a94 <_malloc_r+0x100>)
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	001c      	movs	r4, r3
 80049ba:	2c00      	cmp	r4, #0
 80049bc:	d133      	bne.n	8004a26 <_malloc_r+0x92>
 80049be:	0039      	movs	r1, r7
 80049c0:	0030      	movs	r0, r6
 80049c2:	f7ff ffc5 	bl	8004950 <sbrk_aligned>
 80049c6:	0004      	movs	r4, r0
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d15e      	bne.n	8004a8a <_malloc_r+0xf6>
 80049cc:	9b00      	ldr	r3, [sp, #0]
 80049ce:	681c      	ldr	r4, [r3, #0]
 80049d0:	0025      	movs	r5, r4
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	d14e      	bne.n	8004a74 <_malloc_r+0xe0>
 80049d6:	2c00      	cmp	r4, #0
 80049d8:	d051      	beq.n	8004a7e <_malloc_r+0xea>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	0029      	movs	r1, r5
 80049de:	18e3      	adds	r3, r4, r3
 80049e0:	0030      	movs	r0, r6
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	f000 fb5e 	bl	80050a4 <_sbrk_r>
 80049e8:	9b01      	ldr	r3, [sp, #4]
 80049ea:	4283      	cmp	r3, r0
 80049ec:	d147      	bne.n	8004a7e <_malloc_r+0xea>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	0030      	movs	r0, r6
 80049f2:	1aff      	subs	r7, r7, r3
 80049f4:	0039      	movs	r1, r7
 80049f6:	f7ff ffab 	bl	8004950 <sbrk_aligned>
 80049fa:	3001      	adds	r0, #1
 80049fc:	d03f      	beq.n	8004a7e <_malloc_r+0xea>
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	19db      	adds	r3, r3, r7
 8004a02:	6023      	str	r3, [r4, #0]
 8004a04:	9b00      	ldr	r3, [sp, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d040      	beq.n	8004a8e <_malloc_r+0xfa>
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	42a2      	cmp	r2, r4
 8004a10:	d133      	bne.n	8004a7a <_malloc_r+0xe6>
 8004a12:	2200      	movs	r2, #0
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	e014      	b.n	8004a42 <_malloc_r+0xae>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	dac5      	bge.n	80049a8 <_malloc_r+0x14>
 8004a1c:	230c      	movs	r3, #12
 8004a1e:	2500      	movs	r5, #0
 8004a20:	6033      	str	r3, [r6, #0]
 8004a22:	0028      	movs	r0, r5
 8004a24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a26:	6821      	ldr	r1, [r4, #0]
 8004a28:	1bc9      	subs	r1, r1, r7
 8004a2a:	d420      	bmi.n	8004a6e <_malloc_r+0xda>
 8004a2c:	290b      	cmp	r1, #11
 8004a2e:	d918      	bls.n	8004a62 <_malloc_r+0xce>
 8004a30:	19e2      	adds	r2, r4, r7
 8004a32:	6027      	str	r7, [r4, #0]
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d112      	bne.n	8004a5e <_malloc_r+0xca>
 8004a38:	9b00      	ldr	r3, [sp, #0]
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	6011      	str	r1, [r2, #0]
 8004a40:	6053      	str	r3, [r2, #4]
 8004a42:	0030      	movs	r0, r6
 8004a44:	0025      	movs	r5, r4
 8004a46:	f000 f82f 	bl	8004aa8 <__malloc_unlock>
 8004a4a:	2207      	movs	r2, #7
 8004a4c:	350b      	adds	r5, #11
 8004a4e:	1d23      	adds	r3, r4, #4
 8004a50:	4395      	bics	r5, r2
 8004a52:	1aea      	subs	r2, r5, r3
 8004a54:	429d      	cmp	r5, r3
 8004a56:	d0e4      	beq.n	8004a22 <_malloc_r+0x8e>
 8004a58:	1b5b      	subs	r3, r3, r5
 8004a5a:	50a3      	str	r3, [r4, r2]
 8004a5c:	e7e1      	b.n	8004a22 <_malloc_r+0x8e>
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	e7ec      	b.n	8004a3c <_malloc_r+0xa8>
 8004a62:	6862      	ldr	r2, [r4, #4]
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	d1d5      	bne.n	8004a14 <_malloc_r+0x80>
 8004a68:	9b00      	ldr	r3, [sp, #0]
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e7e9      	b.n	8004a42 <_malloc_r+0xae>
 8004a6e:	0023      	movs	r3, r4
 8004a70:	6864      	ldr	r4, [r4, #4]
 8004a72:	e7a2      	b.n	80049ba <_malloc_r+0x26>
 8004a74:	002c      	movs	r4, r5
 8004a76:	686d      	ldr	r5, [r5, #4]
 8004a78:	e7ab      	b.n	80049d2 <_malloc_r+0x3e>
 8004a7a:	0013      	movs	r3, r2
 8004a7c:	e7c4      	b.n	8004a08 <_malloc_r+0x74>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	0030      	movs	r0, r6
 8004a82:	6033      	str	r3, [r6, #0]
 8004a84:	f000 f810 	bl	8004aa8 <__malloc_unlock>
 8004a88:	e7cb      	b.n	8004a22 <_malloc_r+0x8e>
 8004a8a:	6027      	str	r7, [r4, #0]
 8004a8c:	e7d9      	b.n	8004a42 <_malloc_r+0xae>
 8004a8e:	605b      	str	r3, [r3, #4]
 8004a90:	deff      	udf	#255	; 0xff
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	20000300 	.word	0x20000300

08004a98 <__malloc_lock>:
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	4802      	ldr	r0, [pc, #8]	; (8004aa4 <__malloc_lock+0xc>)
 8004a9c:	f7ff ff02 	bl	80048a4 <__retarget_lock_acquire_recursive>
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	200002fc 	.word	0x200002fc

08004aa8 <__malloc_unlock>:
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	4802      	ldr	r0, [pc, #8]	; (8004ab4 <__malloc_unlock+0xc>)
 8004aac:	f7ff fefb 	bl	80048a6 <__retarget_lock_release_recursive>
 8004ab0:	bd10      	pop	{r4, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	200002fc 	.word	0x200002fc

08004ab8 <__ssputs_r>:
 8004ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aba:	b085      	sub	sp, #20
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	9203      	str	r2, [sp, #12]
 8004ac0:	688e      	ldr	r6, [r1, #8]
 8004ac2:	9a01      	ldr	r2, [sp, #4]
 8004ac4:	0007      	movs	r7, r0
 8004ac6:	000c      	movs	r4, r1
 8004ac8:	680b      	ldr	r3, [r1, #0]
 8004aca:	4296      	cmp	r6, r2
 8004acc:	d831      	bhi.n	8004b32 <__ssputs_r+0x7a>
 8004ace:	898a      	ldrh	r2, [r1, #12]
 8004ad0:	2190      	movs	r1, #144	; 0x90
 8004ad2:	00c9      	lsls	r1, r1, #3
 8004ad4:	420a      	tst	r2, r1
 8004ad6:	d029      	beq.n	8004b2c <__ssputs_r+0x74>
 8004ad8:	2003      	movs	r0, #3
 8004ada:	6921      	ldr	r1, [r4, #16]
 8004adc:	1a5b      	subs	r3, r3, r1
 8004ade:	9302      	str	r3, [sp, #8]
 8004ae0:	6963      	ldr	r3, [r4, #20]
 8004ae2:	4343      	muls	r3, r0
 8004ae4:	0fdd      	lsrs	r5, r3, #31
 8004ae6:	18ed      	adds	r5, r5, r3
 8004ae8:	9b01      	ldr	r3, [sp, #4]
 8004aea:	9802      	ldr	r0, [sp, #8]
 8004aec:	3301      	adds	r3, #1
 8004aee:	181b      	adds	r3, r3, r0
 8004af0:	106d      	asrs	r5, r5, #1
 8004af2:	42ab      	cmp	r3, r5
 8004af4:	d900      	bls.n	8004af8 <__ssputs_r+0x40>
 8004af6:	001d      	movs	r5, r3
 8004af8:	0552      	lsls	r2, r2, #21
 8004afa:	d529      	bpl.n	8004b50 <__ssputs_r+0x98>
 8004afc:	0029      	movs	r1, r5
 8004afe:	0038      	movs	r0, r7
 8004b00:	f7ff ff48 	bl	8004994 <_malloc_r>
 8004b04:	1e06      	subs	r6, r0, #0
 8004b06:	d02d      	beq.n	8004b64 <__ssputs_r+0xac>
 8004b08:	9a02      	ldr	r2, [sp, #8]
 8004b0a:	6921      	ldr	r1, [r4, #16]
 8004b0c:	f7ff fecc 	bl	80048a8 <memcpy>
 8004b10:	89a2      	ldrh	r2, [r4, #12]
 8004b12:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <__ssputs_r+0xc0>)
 8004b14:	401a      	ands	r2, r3
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	9b02      	ldr	r3, [sp, #8]
 8004b1e:	6126      	str	r6, [r4, #16]
 8004b20:	18f6      	adds	r6, r6, r3
 8004b22:	6026      	str	r6, [r4, #0]
 8004b24:	6165      	str	r5, [r4, #20]
 8004b26:	9e01      	ldr	r6, [sp, #4]
 8004b28:	1aed      	subs	r5, r5, r3
 8004b2a:	60a5      	str	r5, [r4, #8]
 8004b2c:	9b01      	ldr	r3, [sp, #4]
 8004b2e:	429e      	cmp	r6, r3
 8004b30:	d900      	bls.n	8004b34 <__ssputs_r+0x7c>
 8004b32:	9e01      	ldr	r6, [sp, #4]
 8004b34:	0032      	movs	r2, r6
 8004b36:	9903      	ldr	r1, [sp, #12]
 8004b38:	6820      	ldr	r0, [r4, #0]
 8004b3a:	f000 fa9f 	bl	800507c <memmove>
 8004b3e:	2000      	movs	r0, #0
 8004b40:	68a3      	ldr	r3, [r4, #8]
 8004b42:	1b9b      	subs	r3, r3, r6
 8004b44:	60a3      	str	r3, [r4, #8]
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	199b      	adds	r3, r3, r6
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	b005      	add	sp, #20
 8004b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b50:	002a      	movs	r2, r5
 8004b52:	0038      	movs	r0, r7
 8004b54:	f000 fac3 	bl	80050de <_realloc_r>
 8004b58:	1e06      	subs	r6, r0, #0
 8004b5a:	d1df      	bne.n	8004b1c <__ssputs_r+0x64>
 8004b5c:	0038      	movs	r0, r7
 8004b5e:	6921      	ldr	r1, [r4, #16]
 8004b60:	f7ff feac 	bl	80048bc <_free_r>
 8004b64:	230c      	movs	r3, #12
 8004b66:	2001      	movs	r0, #1
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	89a2      	ldrh	r2, [r4, #12]
 8004b6c:	3334      	adds	r3, #52	; 0x34
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	81a3      	strh	r3, [r4, #12]
 8004b72:	4240      	negs	r0, r0
 8004b74:	e7ea      	b.n	8004b4c <__ssputs_r+0x94>
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	fffffb7f 	.word	0xfffffb7f

08004b7c <_svfiprintf_r>:
 8004b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7e:	b0a1      	sub	sp, #132	; 0x84
 8004b80:	9003      	str	r0, [sp, #12]
 8004b82:	001d      	movs	r5, r3
 8004b84:	898b      	ldrh	r3, [r1, #12]
 8004b86:	000f      	movs	r7, r1
 8004b88:	0016      	movs	r6, r2
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	d511      	bpl.n	8004bb2 <_svfiprintf_r+0x36>
 8004b8e:	690b      	ldr	r3, [r1, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10e      	bne.n	8004bb2 <_svfiprintf_r+0x36>
 8004b94:	2140      	movs	r1, #64	; 0x40
 8004b96:	f7ff fefd 	bl	8004994 <_malloc_r>
 8004b9a:	6038      	str	r0, [r7, #0]
 8004b9c:	6138      	str	r0, [r7, #16]
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d105      	bne.n	8004bae <_svfiprintf_r+0x32>
 8004ba2:	230c      	movs	r3, #12
 8004ba4:	9a03      	ldr	r2, [sp, #12]
 8004ba6:	3801      	subs	r0, #1
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	b021      	add	sp, #132	; 0x84
 8004bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bae:	2340      	movs	r3, #64	; 0x40
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	ac08      	add	r4, sp, #32
 8004bb6:	6163      	str	r3, [r4, #20]
 8004bb8:	3320      	adds	r3, #32
 8004bba:	7663      	strb	r3, [r4, #25]
 8004bbc:	3310      	adds	r3, #16
 8004bbe:	76a3      	strb	r3, [r4, #26]
 8004bc0:	9507      	str	r5, [sp, #28]
 8004bc2:	0035      	movs	r5, r6
 8004bc4:	782b      	ldrb	r3, [r5, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <_svfiprintf_r+0x52>
 8004bca:	2b25      	cmp	r3, #37	; 0x25
 8004bcc:	d148      	bne.n	8004c60 <_svfiprintf_r+0xe4>
 8004bce:	1bab      	subs	r3, r5, r6
 8004bd0:	9305      	str	r3, [sp, #20]
 8004bd2:	42b5      	cmp	r5, r6
 8004bd4:	d00b      	beq.n	8004bee <_svfiprintf_r+0x72>
 8004bd6:	0032      	movs	r2, r6
 8004bd8:	0039      	movs	r1, r7
 8004bda:	9803      	ldr	r0, [sp, #12]
 8004bdc:	f7ff ff6c 	bl	8004ab8 <__ssputs_r>
 8004be0:	3001      	adds	r0, #1
 8004be2:	d100      	bne.n	8004be6 <_svfiprintf_r+0x6a>
 8004be4:	e0af      	b.n	8004d46 <_svfiprintf_r+0x1ca>
 8004be6:	6963      	ldr	r3, [r4, #20]
 8004be8:	9a05      	ldr	r2, [sp, #20]
 8004bea:	189b      	adds	r3, r3, r2
 8004bec:	6163      	str	r3, [r4, #20]
 8004bee:	782b      	ldrb	r3, [r5, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d100      	bne.n	8004bf6 <_svfiprintf_r+0x7a>
 8004bf4:	e0a7      	b.n	8004d46 <_svfiprintf_r+0x1ca>
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4252      	negs	r2, r2
 8004bfc:	6062      	str	r2, [r4, #4]
 8004bfe:	a904      	add	r1, sp, #16
 8004c00:	3254      	adds	r2, #84	; 0x54
 8004c02:	1852      	adds	r2, r2, r1
 8004c04:	1c6e      	adds	r6, r5, #1
 8004c06:	6023      	str	r3, [r4, #0]
 8004c08:	60e3      	str	r3, [r4, #12]
 8004c0a:	60a3      	str	r3, [r4, #8]
 8004c0c:	7013      	strb	r3, [r2, #0]
 8004c0e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c10:	4b55      	ldr	r3, [pc, #340]	; (8004d68 <_svfiprintf_r+0x1ec>)
 8004c12:	2205      	movs	r2, #5
 8004c14:	0018      	movs	r0, r3
 8004c16:	7831      	ldrb	r1, [r6, #0]
 8004c18:	9305      	str	r3, [sp, #20]
 8004c1a:	f000 fa55 	bl	80050c8 <memchr>
 8004c1e:	1c75      	adds	r5, r6, #1
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d11f      	bne.n	8004c64 <_svfiprintf_r+0xe8>
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	06d3      	lsls	r3, r2, #27
 8004c28:	d504      	bpl.n	8004c34 <_svfiprintf_r+0xb8>
 8004c2a:	2353      	movs	r3, #83	; 0x53
 8004c2c:	a904      	add	r1, sp, #16
 8004c2e:	185b      	adds	r3, r3, r1
 8004c30:	2120      	movs	r1, #32
 8004c32:	7019      	strb	r1, [r3, #0]
 8004c34:	0713      	lsls	r3, r2, #28
 8004c36:	d504      	bpl.n	8004c42 <_svfiprintf_r+0xc6>
 8004c38:	2353      	movs	r3, #83	; 0x53
 8004c3a:	a904      	add	r1, sp, #16
 8004c3c:	185b      	adds	r3, r3, r1
 8004c3e:	212b      	movs	r1, #43	; 0x2b
 8004c40:	7019      	strb	r1, [r3, #0]
 8004c42:	7833      	ldrb	r3, [r6, #0]
 8004c44:	2b2a      	cmp	r3, #42	; 0x2a
 8004c46:	d016      	beq.n	8004c76 <_svfiprintf_r+0xfa>
 8004c48:	0035      	movs	r5, r6
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	200a      	movs	r0, #10
 8004c4e:	68e3      	ldr	r3, [r4, #12]
 8004c50:	782a      	ldrb	r2, [r5, #0]
 8004c52:	1c6e      	adds	r6, r5, #1
 8004c54:	3a30      	subs	r2, #48	; 0x30
 8004c56:	2a09      	cmp	r2, #9
 8004c58:	d94e      	bls.n	8004cf8 <_svfiprintf_r+0x17c>
 8004c5a:	2900      	cmp	r1, #0
 8004c5c:	d111      	bne.n	8004c82 <_svfiprintf_r+0x106>
 8004c5e:	e017      	b.n	8004c90 <_svfiprintf_r+0x114>
 8004c60:	3501      	adds	r5, #1
 8004c62:	e7af      	b.n	8004bc4 <_svfiprintf_r+0x48>
 8004c64:	9b05      	ldr	r3, [sp, #20]
 8004c66:	6822      	ldr	r2, [r4, #0]
 8004c68:	1ac0      	subs	r0, r0, r3
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4083      	lsls	r3, r0
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	002e      	movs	r6, r5
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	e7cc      	b.n	8004c10 <_svfiprintf_r+0x94>
 8004c76:	9b07      	ldr	r3, [sp, #28]
 8004c78:	1d19      	adds	r1, r3, #4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	9107      	str	r1, [sp, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	db01      	blt.n	8004c86 <_svfiprintf_r+0x10a>
 8004c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c84:	e004      	b.n	8004c90 <_svfiprintf_r+0x114>
 8004c86:	425b      	negs	r3, r3
 8004c88:	60e3      	str	r3, [r4, #12]
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	6023      	str	r3, [r4, #0]
 8004c90:	782b      	ldrb	r3, [r5, #0]
 8004c92:	2b2e      	cmp	r3, #46	; 0x2e
 8004c94:	d10a      	bne.n	8004cac <_svfiprintf_r+0x130>
 8004c96:	786b      	ldrb	r3, [r5, #1]
 8004c98:	2b2a      	cmp	r3, #42	; 0x2a
 8004c9a:	d135      	bne.n	8004d08 <_svfiprintf_r+0x18c>
 8004c9c:	9b07      	ldr	r3, [sp, #28]
 8004c9e:	3502      	adds	r5, #2
 8004ca0:	1d1a      	adds	r2, r3, #4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	9207      	str	r2, [sp, #28]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	db2b      	blt.n	8004d02 <_svfiprintf_r+0x186>
 8004caa:	9309      	str	r3, [sp, #36]	; 0x24
 8004cac:	4e2f      	ldr	r6, [pc, #188]	; (8004d6c <_svfiprintf_r+0x1f0>)
 8004cae:	2203      	movs	r2, #3
 8004cb0:	0030      	movs	r0, r6
 8004cb2:	7829      	ldrb	r1, [r5, #0]
 8004cb4:	f000 fa08 	bl	80050c8 <memchr>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d006      	beq.n	8004cca <_svfiprintf_r+0x14e>
 8004cbc:	2340      	movs	r3, #64	; 0x40
 8004cbe:	1b80      	subs	r0, r0, r6
 8004cc0:	4083      	lsls	r3, r0
 8004cc2:	6822      	ldr	r2, [r4, #0]
 8004cc4:	3501      	adds	r5, #1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	7829      	ldrb	r1, [r5, #0]
 8004ccc:	2206      	movs	r2, #6
 8004cce:	4828      	ldr	r0, [pc, #160]	; (8004d70 <_svfiprintf_r+0x1f4>)
 8004cd0:	1c6e      	adds	r6, r5, #1
 8004cd2:	7621      	strb	r1, [r4, #24]
 8004cd4:	f000 f9f8 	bl	80050c8 <memchr>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d03c      	beq.n	8004d56 <_svfiprintf_r+0x1da>
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <_svfiprintf_r+0x1f8>)
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d125      	bne.n	8004d2e <_svfiprintf_r+0x1b2>
 8004ce2:	2207      	movs	r2, #7
 8004ce4:	9b07      	ldr	r3, [sp, #28]
 8004ce6:	3307      	adds	r3, #7
 8004ce8:	4393      	bics	r3, r2
 8004cea:	3308      	adds	r3, #8
 8004cec:	9307      	str	r3, [sp, #28]
 8004cee:	6963      	ldr	r3, [r4, #20]
 8004cf0:	9a04      	ldr	r2, [sp, #16]
 8004cf2:	189b      	adds	r3, r3, r2
 8004cf4:	6163      	str	r3, [r4, #20]
 8004cf6:	e764      	b.n	8004bc2 <_svfiprintf_r+0x46>
 8004cf8:	4343      	muls	r3, r0
 8004cfa:	0035      	movs	r5, r6
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	189b      	adds	r3, r3, r2
 8004d00:	e7a6      	b.n	8004c50 <_svfiprintf_r+0xd4>
 8004d02:	2301      	movs	r3, #1
 8004d04:	425b      	negs	r3, r3
 8004d06:	e7d0      	b.n	8004caa <_svfiprintf_r+0x12e>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	200a      	movs	r0, #10
 8004d0c:	001a      	movs	r2, r3
 8004d0e:	3501      	adds	r5, #1
 8004d10:	6063      	str	r3, [r4, #4]
 8004d12:	7829      	ldrb	r1, [r5, #0]
 8004d14:	1c6e      	adds	r6, r5, #1
 8004d16:	3930      	subs	r1, #48	; 0x30
 8004d18:	2909      	cmp	r1, #9
 8004d1a:	d903      	bls.n	8004d24 <_svfiprintf_r+0x1a8>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0c5      	beq.n	8004cac <_svfiprintf_r+0x130>
 8004d20:	9209      	str	r2, [sp, #36]	; 0x24
 8004d22:	e7c3      	b.n	8004cac <_svfiprintf_r+0x130>
 8004d24:	4342      	muls	r2, r0
 8004d26:	0035      	movs	r5, r6
 8004d28:	2301      	movs	r3, #1
 8004d2a:	1852      	adds	r2, r2, r1
 8004d2c:	e7f1      	b.n	8004d12 <_svfiprintf_r+0x196>
 8004d2e:	aa07      	add	r2, sp, #28
 8004d30:	9200      	str	r2, [sp, #0]
 8004d32:	0021      	movs	r1, r4
 8004d34:	003a      	movs	r2, r7
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <_svfiprintf_r+0x1fc>)
 8004d38:	9803      	ldr	r0, [sp, #12]
 8004d3a:	e000      	b.n	8004d3e <_svfiprintf_r+0x1c2>
 8004d3c:	bf00      	nop
 8004d3e:	9004      	str	r0, [sp, #16]
 8004d40:	9b04      	ldr	r3, [sp, #16]
 8004d42:	3301      	adds	r3, #1
 8004d44:	d1d3      	bne.n	8004cee <_svfiprintf_r+0x172>
 8004d46:	89bb      	ldrh	r3, [r7, #12]
 8004d48:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004d4a:	065b      	lsls	r3, r3, #25
 8004d4c:	d400      	bmi.n	8004d50 <_svfiprintf_r+0x1d4>
 8004d4e:	e72c      	b.n	8004baa <_svfiprintf_r+0x2e>
 8004d50:	2001      	movs	r0, #1
 8004d52:	4240      	negs	r0, r0
 8004d54:	e729      	b.n	8004baa <_svfiprintf_r+0x2e>
 8004d56:	aa07      	add	r2, sp, #28
 8004d58:	9200      	str	r2, [sp, #0]
 8004d5a:	0021      	movs	r1, r4
 8004d5c:	003a      	movs	r2, r7
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <_svfiprintf_r+0x1fc>)
 8004d60:	9803      	ldr	r0, [sp, #12]
 8004d62:	f000 f87b 	bl	8004e5c <_printf_i>
 8004d66:	e7ea      	b.n	8004d3e <_svfiprintf_r+0x1c2>
 8004d68:	08005240 	.word	0x08005240
 8004d6c:	08005246 	.word	0x08005246
 8004d70:	0800524a 	.word	0x0800524a
 8004d74:	00000000 	.word	0x00000000
 8004d78:	08004ab9 	.word	0x08004ab9

08004d7c <_printf_common>:
 8004d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d7e:	0016      	movs	r6, r2
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	688a      	ldr	r2, [r1, #8]
 8004d84:	690b      	ldr	r3, [r1, #16]
 8004d86:	000c      	movs	r4, r1
 8004d88:	9000      	str	r0, [sp, #0]
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	da00      	bge.n	8004d90 <_printf_common+0x14>
 8004d8e:	0013      	movs	r3, r2
 8004d90:	0022      	movs	r2, r4
 8004d92:	6033      	str	r3, [r6, #0]
 8004d94:	3243      	adds	r2, #67	; 0x43
 8004d96:	7812      	ldrb	r2, [r2, #0]
 8004d98:	2a00      	cmp	r2, #0
 8004d9a:	d001      	beq.n	8004da0 <_printf_common+0x24>
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	6033      	str	r3, [r6, #0]
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	069b      	lsls	r3, r3, #26
 8004da4:	d502      	bpl.n	8004dac <_printf_common+0x30>
 8004da6:	6833      	ldr	r3, [r6, #0]
 8004da8:	3302      	adds	r3, #2
 8004daa:	6033      	str	r3, [r6, #0]
 8004dac:	6822      	ldr	r2, [r4, #0]
 8004dae:	2306      	movs	r3, #6
 8004db0:	0015      	movs	r5, r2
 8004db2:	401d      	ands	r5, r3
 8004db4:	421a      	tst	r2, r3
 8004db6:	d027      	beq.n	8004e08 <_printf_common+0x8c>
 8004db8:	0023      	movs	r3, r4
 8004dba:	3343      	adds	r3, #67	; 0x43
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	1e5a      	subs	r2, r3, #1
 8004dc0:	4193      	sbcs	r3, r2
 8004dc2:	6822      	ldr	r2, [r4, #0]
 8004dc4:	0692      	lsls	r2, r2, #26
 8004dc6:	d430      	bmi.n	8004e2a <_printf_common+0xae>
 8004dc8:	0022      	movs	r2, r4
 8004dca:	9901      	ldr	r1, [sp, #4]
 8004dcc:	9800      	ldr	r0, [sp, #0]
 8004dce:	9d08      	ldr	r5, [sp, #32]
 8004dd0:	3243      	adds	r2, #67	; 0x43
 8004dd2:	47a8      	blx	r5
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d025      	beq.n	8004e24 <_printf_common+0xa8>
 8004dd8:	2206      	movs	r2, #6
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	2500      	movs	r5, #0
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d105      	bne.n	8004df0 <_printf_common+0x74>
 8004de4:	6833      	ldr	r3, [r6, #0]
 8004de6:	68e5      	ldr	r5, [r4, #12]
 8004de8:	1aed      	subs	r5, r5, r3
 8004dea:	43eb      	mvns	r3, r5
 8004dec:	17db      	asrs	r3, r3, #31
 8004dee:	401d      	ands	r5, r3
 8004df0:	68a3      	ldr	r3, [r4, #8]
 8004df2:	6922      	ldr	r2, [r4, #16]
 8004df4:	4293      	cmp	r3, r2
 8004df6:	dd01      	ble.n	8004dfc <_printf_common+0x80>
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	18ed      	adds	r5, r5, r3
 8004dfc:	2600      	movs	r6, #0
 8004dfe:	42b5      	cmp	r5, r6
 8004e00:	d120      	bne.n	8004e44 <_printf_common+0xc8>
 8004e02:	2000      	movs	r0, #0
 8004e04:	e010      	b.n	8004e28 <_printf_common+0xac>
 8004e06:	3501      	adds	r5, #1
 8004e08:	68e3      	ldr	r3, [r4, #12]
 8004e0a:	6832      	ldr	r2, [r6, #0]
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	42ab      	cmp	r3, r5
 8004e10:	ddd2      	ble.n	8004db8 <_printf_common+0x3c>
 8004e12:	0022      	movs	r2, r4
 8004e14:	2301      	movs	r3, #1
 8004e16:	9901      	ldr	r1, [sp, #4]
 8004e18:	9800      	ldr	r0, [sp, #0]
 8004e1a:	9f08      	ldr	r7, [sp, #32]
 8004e1c:	3219      	adds	r2, #25
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	d1f0      	bne.n	8004e06 <_printf_common+0x8a>
 8004e24:	2001      	movs	r0, #1
 8004e26:	4240      	negs	r0, r0
 8004e28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e2a:	2030      	movs	r0, #48	; 0x30
 8004e2c:	18e1      	adds	r1, r4, r3
 8004e2e:	3143      	adds	r1, #67	; 0x43
 8004e30:	7008      	strb	r0, [r1, #0]
 8004e32:	0021      	movs	r1, r4
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	3145      	adds	r1, #69	; 0x45
 8004e38:	7809      	ldrb	r1, [r1, #0]
 8004e3a:	18a2      	adds	r2, r4, r2
 8004e3c:	3243      	adds	r2, #67	; 0x43
 8004e3e:	3302      	adds	r3, #2
 8004e40:	7011      	strb	r1, [r2, #0]
 8004e42:	e7c1      	b.n	8004dc8 <_printf_common+0x4c>
 8004e44:	0022      	movs	r2, r4
 8004e46:	2301      	movs	r3, #1
 8004e48:	9901      	ldr	r1, [sp, #4]
 8004e4a:	9800      	ldr	r0, [sp, #0]
 8004e4c:	9f08      	ldr	r7, [sp, #32]
 8004e4e:	321a      	adds	r2, #26
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	d0e6      	beq.n	8004e24 <_printf_common+0xa8>
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7d1      	b.n	8004dfe <_printf_common+0x82>
	...

08004e5c <_printf_i>:
 8004e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e5e:	b08b      	sub	sp, #44	; 0x2c
 8004e60:	9206      	str	r2, [sp, #24]
 8004e62:	000a      	movs	r2, r1
 8004e64:	3243      	adds	r2, #67	; 0x43
 8004e66:	9307      	str	r3, [sp, #28]
 8004e68:	9005      	str	r0, [sp, #20]
 8004e6a:	9204      	str	r2, [sp, #16]
 8004e6c:	7e0a      	ldrb	r2, [r1, #24]
 8004e6e:	000c      	movs	r4, r1
 8004e70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e72:	2a78      	cmp	r2, #120	; 0x78
 8004e74:	d809      	bhi.n	8004e8a <_printf_i+0x2e>
 8004e76:	2a62      	cmp	r2, #98	; 0x62
 8004e78:	d80b      	bhi.n	8004e92 <_printf_i+0x36>
 8004e7a:	2a00      	cmp	r2, #0
 8004e7c:	d100      	bne.n	8004e80 <_printf_i+0x24>
 8004e7e:	e0be      	b.n	8004ffe <_printf_i+0x1a2>
 8004e80:	497c      	ldr	r1, [pc, #496]	; (8005074 <_printf_i+0x218>)
 8004e82:	9103      	str	r1, [sp, #12]
 8004e84:	2a58      	cmp	r2, #88	; 0x58
 8004e86:	d100      	bne.n	8004e8a <_printf_i+0x2e>
 8004e88:	e093      	b.n	8004fb2 <_printf_i+0x156>
 8004e8a:	0026      	movs	r6, r4
 8004e8c:	3642      	adds	r6, #66	; 0x42
 8004e8e:	7032      	strb	r2, [r6, #0]
 8004e90:	e022      	b.n	8004ed8 <_printf_i+0x7c>
 8004e92:	0010      	movs	r0, r2
 8004e94:	3863      	subs	r0, #99	; 0x63
 8004e96:	2815      	cmp	r0, #21
 8004e98:	d8f7      	bhi.n	8004e8a <_printf_i+0x2e>
 8004e9a:	f7fb f93b 	bl	8000114 <__gnu_thumb1_case_shi>
 8004e9e:	0016      	.short	0x0016
 8004ea0:	fff6001f 	.word	0xfff6001f
 8004ea4:	fff6fff6 	.word	0xfff6fff6
 8004ea8:	001ffff6 	.word	0x001ffff6
 8004eac:	fff6fff6 	.word	0xfff6fff6
 8004eb0:	fff6fff6 	.word	0xfff6fff6
 8004eb4:	003600a3 	.word	0x003600a3
 8004eb8:	fff60083 	.word	0xfff60083
 8004ebc:	00b4fff6 	.word	0x00b4fff6
 8004ec0:	0036fff6 	.word	0x0036fff6
 8004ec4:	fff6fff6 	.word	0xfff6fff6
 8004ec8:	0087      	.short	0x0087
 8004eca:	0026      	movs	r6, r4
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	3642      	adds	r6, #66	; 0x42
 8004ed0:	1d11      	adds	r1, r2, #4
 8004ed2:	6019      	str	r1, [r3, #0]
 8004ed4:	6813      	ldr	r3, [r2, #0]
 8004ed6:	7033      	strb	r3, [r6, #0]
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0a2      	b.n	8005022 <_printf_i+0x1c6>
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	6809      	ldr	r1, [r1, #0]
 8004ee0:	1d02      	adds	r2, r0, #4
 8004ee2:	060d      	lsls	r5, r1, #24
 8004ee4:	d50b      	bpl.n	8004efe <_printf_i+0xa2>
 8004ee6:	6805      	ldr	r5, [r0, #0]
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	2d00      	cmp	r5, #0
 8004eec:	da03      	bge.n	8004ef6 <_printf_i+0x9a>
 8004eee:	232d      	movs	r3, #45	; 0x2d
 8004ef0:	9a04      	ldr	r2, [sp, #16]
 8004ef2:	426d      	negs	r5, r5
 8004ef4:	7013      	strb	r3, [r2, #0]
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	; (8005074 <_printf_i+0x218>)
 8004ef8:	270a      	movs	r7, #10
 8004efa:	9303      	str	r3, [sp, #12]
 8004efc:	e01b      	b.n	8004f36 <_printf_i+0xda>
 8004efe:	6805      	ldr	r5, [r0, #0]
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	0649      	lsls	r1, r1, #25
 8004f04:	d5f1      	bpl.n	8004eea <_printf_i+0x8e>
 8004f06:	b22d      	sxth	r5, r5
 8004f08:	e7ef      	b.n	8004eea <_printf_i+0x8e>
 8004f0a:	680d      	ldr	r5, [r1, #0]
 8004f0c:	6819      	ldr	r1, [r3, #0]
 8004f0e:	1d08      	adds	r0, r1, #4
 8004f10:	6018      	str	r0, [r3, #0]
 8004f12:	062e      	lsls	r6, r5, #24
 8004f14:	d501      	bpl.n	8004f1a <_printf_i+0xbe>
 8004f16:	680d      	ldr	r5, [r1, #0]
 8004f18:	e003      	b.n	8004f22 <_printf_i+0xc6>
 8004f1a:	066d      	lsls	r5, r5, #25
 8004f1c:	d5fb      	bpl.n	8004f16 <_printf_i+0xba>
 8004f1e:	680d      	ldr	r5, [r1, #0]
 8004f20:	b2ad      	uxth	r5, r5
 8004f22:	4b54      	ldr	r3, [pc, #336]	; (8005074 <_printf_i+0x218>)
 8004f24:	2708      	movs	r7, #8
 8004f26:	9303      	str	r3, [sp, #12]
 8004f28:	2a6f      	cmp	r2, #111	; 0x6f
 8004f2a:	d000      	beq.n	8004f2e <_printf_i+0xd2>
 8004f2c:	3702      	adds	r7, #2
 8004f2e:	0023      	movs	r3, r4
 8004f30:	2200      	movs	r2, #0
 8004f32:	3343      	adds	r3, #67	; 0x43
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	6863      	ldr	r3, [r4, #4]
 8004f38:	60a3      	str	r3, [r4, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	db03      	blt.n	8004f46 <_printf_i+0xea>
 8004f3e:	2104      	movs	r1, #4
 8004f40:	6822      	ldr	r2, [r4, #0]
 8004f42:	438a      	bics	r2, r1
 8004f44:	6022      	str	r2, [r4, #0]
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	d102      	bne.n	8004f50 <_printf_i+0xf4>
 8004f4a:	9e04      	ldr	r6, [sp, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00c      	beq.n	8004f6a <_printf_i+0x10e>
 8004f50:	9e04      	ldr	r6, [sp, #16]
 8004f52:	0028      	movs	r0, r5
 8004f54:	0039      	movs	r1, r7
 8004f56:	f7fb f96d 	bl	8000234 <__aeabi_uidivmod>
 8004f5a:	9b03      	ldr	r3, [sp, #12]
 8004f5c:	3e01      	subs	r6, #1
 8004f5e:	5c5b      	ldrb	r3, [r3, r1]
 8004f60:	7033      	strb	r3, [r6, #0]
 8004f62:	002b      	movs	r3, r5
 8004f64:	0005      	movs	r5, r0
 8004f66:	429f      	cmp	r7, r3
 8004f68:	d9f3      	bls.n	8004f52 <_printf_i+0xf6>
 8004f6a:	2f08      	cmp	r7, #8
 8004f6c:	d109      	bne.n	8004f82 <_printf_i+0x126>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	07db      	lsls	r3, r3, #31
 8004f72:	d506      	bpl.n	8004f82 <_printf_i+0x126>
 8004f74:	6862      	ldr	r2, [r4, #4]
 8004f76:	6923      	ldr	r3, [r4, #16]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	dc02      	bgt.n	8004f82 <_printf_i+0x126>
 8004f7c:	2330      	movs	r3, #48	; 0x30
 8004f7e:	3e01      	subs	r6, #1
 8004f80:	7033      	strb	r3, [r6, #0]
 8004f82:	9b04      	ldr	r3, [sp, #16]
 8004f84:	1b9b      	subs	r3, r3, r6
 8004f86:	6123      	str	r3, [r4, #16]
 8004f88:	9b07      	ldr	r3, [sp, #28]
 8004f8a:	0021      	movs	r1, r4
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	9805      	ldr	r0, [sp, #20]
 8004f90:	9b06      	ldr	r3, [sp, #24]
 8004f92:	aa09      	add	r2, sp, #36	; 0x24
 8004f94:	f7ff fef2 	bl	8004d7c <_printf_common>
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d147      	bne.n	800502c <_printf_i+0x1d0>
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	4240      	negs	r0, r0
 8004fa0:	b00b      	add	sp, #44	; 0x2c
 8004fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	6809      	ldr	r1, [r1, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	6022      	str	r2, [r4, #0]
 8004fac:	2278      	movs	r2, #120	; 0x78
 8004fae:	4932      	ldr	r1, [pc, #200]	; (8005078 <_printf_i+0x21c>)
 8004fb0:	9103      	str	r1, [sp, #12]
 8004fb2:	0021      	movs	r1, r4
 8004fb4:	3145      	adds	r1, #69	; 0x45
 8004fb6:	700a      	strb	r2, [r1, #0]
 8004fb8:	6819      	ldr	r1, [r3, #0]
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	c920      	ldmia	r1!, {r5}
 8004fbe:	0610      	lsls	r0, r2, #24
 8004fc0:	d402      	bmi.n	8004fc8 <_printf_i+0x16c>
 8004fc2:	0650      	lsls	r0, r2, #25
 8004fc4:	d500      	bpl.n	8004fc8 <_printf_i+0x16c>
 8004fc6:	b2ad      	uxth	r5, r5
 8004fc8:	6019      	str	r1, [r3, #0]
 8004fca:	07d3      	lsls	r3, r2, #31
 8004fcc:	d502      	bpl.n	8004fd4 <_printf_i+0x178>
 8004fce:	2320      	movs	r3, #32
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	2710      	movs	r7, #16
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	d1a9      	bne.n	8004f2e <_printf_i+0xd2>
 8004fda:	2220      	movs	r2, #32
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	4393      	bics	r3, r2
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	e7a4      	b.n	8004f2e <_printf_i+0xd2>
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	680d      	ldr	r5, [r1, #0]
 8004fe8:	1d10      	adds	r0, r2, #4
 8004fea:	6949      	ldr	r1, [r1, #20]
 8004fec:	6018      	str	r0, [r3, #0]
 8004fee:	6813      	ldr	r3, [r2, #0]
 8004ff0:	062e      	lsls	r6, r5, #24
 8004ff2:	d501      	bpl.n	8004ff8 <_printf_i+0x19c>
 8004ff4:	6019      	str	r1, [r3, #0]
 8004ff6:	e002      	b.n	8004ffe <_printf_i+0x1a2>
 8004ff8:	066d      	lsls	r5, r5, #25
 8004ffa:	d5fb      	bpl.n	8004ff4 <_printf_i+0x198>
 8004ffc:	8019      	strh	r1, [r3, #0]
 8004ffe:	2300      	movs	r3, #0
 8005000:	9e04      	ldr	r6, [sp, #16]
 8005002:	6123      	str	r3, [r4, #16]
 8005004:	e7c0      	b.n	8004f88 <_printf_i+0x12c>
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	1d11      	adds	r1, r2, #4
 800500a:	6019      	str	r1, [r3, #0]
 800500c:	6816      	ldr	r6, [r2, #0]
 800500e:	2100      	movs	r1, #0
 8005010:	0030      	movs	r0, r6
 8005012:	6862      	ldr	r2, [r4, #4]
 8005014:	f000 f858 	bl	80050c8 <memchr>
 8005018:	2800      	cmp	r0, #0
 800501a:	d001      	beq.n	8005020 <_printf_i+0x1c4>
 800501c:	1b80      	subs	r0, r0, r6
 800501e:	6060      	str	r0, [r4, #4]
 8005020:	6863      	ldr	r3, [r4, #4]
 8005022:	6123      	str	r3, [r4, #16]
 8005024:	2300      	movs	r3, #0
 8005026:	9a04      	ldr	r2, [sp, #16]
 8005028:	7013      	strb	r3, [r2, #0]
 800502a:	e7ad      	b.n	8004f88 <_printf_i+0x12c>
 800502c:	0032      	movs	r2, r6
 800502e:	6923      	ldr	r3, [r4, #16]
 8005030:	9906      	ldr	r1, [sp, #24]
 8005032:	9805      	ldr	r0, [sp, #20]
 8005034:	9d07      	ldr	r5, [sp, #28]
 8005036:	47a8      	blx	r5
 8005038:	3001      	adds	r0, #1
 800503a:	d0af      	beq.n	8004f9c <_printf_i+0x140>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	079b      	lsls	r3, r3, #30
 8005040:	d415      	bmi.n	800506e <_printf_i+0x212>
 8005042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005044:	68e0      	ldr	r0, [r4, #12]
 8005046:	4298      	cmp	r0, r3
 8005048:	daaa      	bge.n	8004fa0 <_printf_i+0x144>
 800504a:	0018      	movs	r0, r3
 800504c:	e7a8      	b.n	8004fa0 <_printf_i+0x144>
 800504e:	0022      	movs	r2, r4
 8005050:	2301      	movs	r3, #1
 8005052:	9906      	ldr	r1, [sp, #24]
 8005054:	9805      	ldr	r0, [sp, #20]
 8005056:	9e07      	ldr	r6, [sp, #28]
 8005058:	3219      	adds	r2, #25
 800505a:	47b0      	blx	r6
 800505c:	3001      	adds	r0, #1
 800505e:	d09d      	beq.n	8004f9c <_printf_i+0x140>
 8005060:	3501      	adds	r5, #1
 8005062:	68e3      	ldr	r3, [r4, #12]
 8005064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	42ab      	cmp	r3, r5
 800506a:	dcf0      	bgt.n	800504e <_printf_i+0x1f2>
 800506c:	e7e9      	b.n	8005042 <_printf_i+0x1e6>
 800506e:	2500      	movs	r5, #0
 8005070:	e7f7      	b.n	8005062 <_printf_i+0x206>
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	08005251 	.word	0x08005251
 8005078:	08005262 	.word	0x08005262

0800507c <memmove>:
 800507c:	b510      	push	{r4, lr}
 800507e:	4288      	cmp	r0, r1
 8005080:	d902      	bls.n	8005088 <memmove+0xc>
 8005082:	188b      	adds	r3, r1, r2
 8005084:	4298      	cmp	r0, r3
 8005086:	d303      	bcc.n	8005090 <memmove+0x14>
 8005088:	2300      	movs	r3, #0
 800508a:	e007      	b.n	800509c <memmove+0x20>
 800508c:	5c8b      	ldrb	r3, [r1, r2]
 800508e:	5483      	strb	r3, [r0, r2]
 8005090:	3a01      	subs	r2, #1
 8005092:	d2fb      	bcs.n	800508c <memmove+0x10>
 8005094:	bd10      	pop	{r4, pc}
 8005096:	5ccc      	ldrb	r4, [r1, r3]
 8005098:	54c4      	strb	r4, [r0, r3]
 800509a:	3301      	adds	r3, #1
 800509c:	429a      	cmp	r2, r3
 800509e:	d1fa      	bne.n	8005096 <memmove+0x1a>
 80050a0:	e7f8      	b.n	8005094 <memmove+0x18>
	...

080050a4 <_sbrk_r>:
 80050a4:	2300      	movs	r3, #0
 80050a6:	b570      	push	{r4, r5, r6, lr}
 80050a8:	4d06      	ldr	r5, [pc, #24]	; (80050c4 <_sbrk_r+0x20>)
 80050aa:	0004      	movs	r4, r0
 80050ac:	0008      	movs	r0, r1
 80050ae:	602b      	str	r3, [r5, #0]
 80050b0:	f7fb ff06 	bl	8000ec0 <_sbrk>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	d103      	bne.n	80050c0 <_sbrk_r+0x1c>
 80050b8:	682b      	ldr	r3, [r5, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d000      	beq.n	80050c0 <_sbrk_r+0x1c>
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	bd70      	pop	{r4, r5, r6, pc}
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	200002f8 	.word	0x200002f8

080050c8 <memchr>:
 80050c8:	b2c9      	uxtb	r1, r1
 80050ca:	1882      	adds	r2, r0, r2
 80050cc:	4290      	cmp	r0, r2
 80050ce:	d101      	bne.n	80050d4 <memchr+0xc>
 80050d0:	2000      	movs	r0, #0
 80050d2:	4770      	bx	lr
 80050d4:	7803      	ldrb	r3, [r0, #0]
 80050d6:	428b      	cmp	r3, r1
 80050d8:	d0fb      	beq.n	80050d2 <memchr+0xa>
 80050da:	3001      	adds	r0, #1
 80050dc:	e7f6      	b.n	80050cc <memchr+0x4>

080050de <_realloc_r>:
 80050de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050e0:	0007      	movs	r7, r0
 80050e2:	000e      	movs	r6, r1
 80050e4:	0014      	movs	r4, r2
 80050e6:	2900      	cmp	r1, #0
 80050e8:	d105      	bne.n	80050f6 <_realloc_r+0x18>
 80050ea:	0011      	movs	r1, r2
 80050ec:	f7ff fc52 	bl	8004994 <_malloc_r>
 80050f0:	0005      	movs	r5, r0
 80050f2:	0028      	movs	r0, r5
 80050f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050f6:	2a00      	cmp	r2, #0
 80050f8:	d103      	bne.n	8005102 <_realloc_r+0x24>
 80050fa:	f7ff fbdf 	bl	80048bc <_free_r>
 80050fe:	0025      	movs	r5, r4
 8005100:	e7f7      	b.n	80050f2 <_realloc_r+0x14>
 8005102:	f000 f81b 	bl	800513c <_malloc_usable_size_r>
 8005106:	9001      	str	r0, [sp, #4]
 8005108:	4284      	cmp	r4, r0
 800510a:	d803      	bhi.n	8005114 <_realloc_r+0x36>
 800510c:	0035      	movs	r5, r6
 800510e:	0843      	lsrs	r3, r0, #1
 8005110:	42a3      	cmp	r3, r4
 8005112:	d3ee      	bcc.n	80050f2 <_realloc_r+0x14>
 8005114:	0021      	movs	r1, r4
 8005116:	0038      	movs	r0, r7
 8005118:	f7ff fc3c 	bl	8004994 <_malloc_r>
 800511c:	1e05      	subs	r5, r0, #0
 800511e:	d0e8      	beq.n	80050f2 <_realloc_r+0x14>
 8005120:	9b01      	ldr	r3, [sp, #4]
 8005122:	0022      	movs	r2, r4
 8005124:	429c      	cmp	r4, r3
 8005126:	d900      	bls.n	800512a <_realloc_r+0x4c>
 8005128:	001a      	movs	r2, r3
 800512a:	0031      	movs	r1, r6
 800512c:	0028      	movs	r0, r5
 800512e:	f7ff fbbb 	bl	80048a8 <memcpy>
 8005132:	0031      	movs	r1, r6
 8005134:	0038      	movs	r0, r7
 8005136:	f7ff fbc1 	bl	80048bc <_free_r>
 800513a:	e7da      	b.n	80050f2 <_realloc_r+0x14>

0800513c <_malloc_usable_size_r>:
 800513c:	1f0b      	subs	r3, r1, #4
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	1f18      	subs	r0, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	da01      	bge.n	800514a <_malloc_usable_size_r+0xe>
 8005146:	580b      	ldr	r3, [r1, r0]
 8005148:	18c0      	adds	r0, r0, r3
 800514a:	4770      	bx	lr

0800514c <_init>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr

08005158 <_fini>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr
